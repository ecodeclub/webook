// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/ecodeclub/webook/internal/ai"
	"github.com/ecodeclub/webook/internal/bff"
	"github.com/ecodeclub/webook/internal/cases"
	"github.com/ecodeclub/webook/internal/comment"
	"github.com/ecodeclub/webook/internal/company"
	"github.com/ecodeclub/webook/internal/cos"
	"github.com/ecodeclub/webook/internal/credit"
	"github.com/ecodeclub/webook/internal/feedback"
	"github.com/ecodeclub/webook/internal/interactive"
	"github.com/ecodeclub/webook/internal/interview"
	"github.com/ecodeclub/webook/internal/label"
	"github.com/ecodeclub/webook/internal/marketing"
	"github.com/ecodeclub/webook/internal/material"
	"github.com/ecodeclub/webook/internal/member"
	"github.com/ecodeclub/webook/internal/order"
	"github.com/ecodeclub/webook/internal/payment"
	"github.com/ecodeclub/webook/internal/permission"
	"github.com/ecodeclub/webook/internal/pkg/middleware"
	"github.com/ecodeclub/webook/internal/product"
	"github.com/ecodeclub/webook/internal/project"
	baguwen "github.com/ecodeclub/webook/internal/question"
	"github.com/ecodeclub/webook/internal/recon"
	"github.com/ecodeclub/webook/internal/resume"
	"github.com/ecodeclub/webook/internal/review"
	"github.com/ecodeclub/webook/internal/roadmap"
	"github.com/ecodeclub/webook/internal/search"
	"github.com/ecodeclub/webook/internal/skill"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitApp() (*App, error) {
	cmdable := InitRedis()
	provider := InitSession(cmdable)
	db := InitDB()
	mq := InitMQ()
	module, err := member.InitModule(db, mq)
	if err != nil {
		return nil, err
	}
	service := module.Svc
	checkMembershipMiddlewareBuilder := middleware.NewCheckMembershipMiddlewareBuilder(service)
	localActiveLimit := initLocalActiveLimiterBuilder()
	permissionModule, err := permission.InitModule(db, mq)
	if err != nil {
		return nil, err
	}
	serviceService := permissionModule.Svc
	checkPermissionMiddlewareBuilder := middleware.NewCheckPermissionMiddlewareBuilder(serviceService)
	interactiveModule, err := interactive.InitModule(db, mq)
	if err != nil {
		return nil, err
	}
	cache := InitCache(cmdable)
	client := InitES()
	creditModule, err := credit.InitModule(db, mq, cache)
	if err != nil {
		return nil, err
	}
	serviceClient, err := InitGrpcClient()
	if err != nil {
		return nil, err
	}
	aiModule, err := ai.InitModule(db, creditModule, mq, serviceClient)
	if err != nil {
		return nil, err
	}
	baguwenModule, err := baguwen.InitModule(db, interactiveModule, cache, client, permissionModule, aiModule, module, provider, mq)
	if err != nil {
		return nil, err
	}
	handler := baguwenModule.Hdl
	examineHandler := baguwenModule.ExamineHdl
	questionSetHandler := baguwenModule.QsHdl
	labelModule := label.InitModule(db)
	webHandler := labelModule.Handler
	clientClient := initAliSMSClient()
	userModule := InitUserModule(db, provider, cache, mq, module, clientClient, permissionModule)
	handler2 := userModule.Hdl
	config := InitCosConfig()
	handler3 := cos.InitHandler(config)
	casesModule, err := cases.InitModule(db, interactiveModule, aiModule, client, module, provider, cache, mq)
	if err != nil {
		return nil, err
	}
	handler4 := casesModule.Hdl
	handler5, err := skill.InitHandler(db, cache, baguwenModule, casesModule, mq)
	if err != nil {
		return nil, err
	}
	handler6, err := feedback.InitHandler(db, mq)
	if err != nil {
		return nil, err
	}
	productModule, err := product.InitModule(db, mq)
	if err != nil {
		return nil, err
	}
	handler7 := productModule.Hdl
	paymentModule, err := payment.InitModule(db, mq, cache, userModule, creditModule)
	if err != nil {
		return nil, err
	}
	orderModule, err := order.InitModule(db, cache, mq, paymentModule, productModule, creditModule)
	if err != nil {
		return nil, err
	}
	handler8 := orderModule.Hdl
	projectModule, err := project.InitModule(db, interactiveModule, permissionModule, mq, provider)
	if err != nil {
		return nil, err
	}
	handler9 := projectModule.Hdl
	handler10 := creditModule.Hdl
	handler11 := paymentModule.Hdl
	marketingModule, err := marketing.InitModule(db, mq, cache, orderModule, productModule)
	if err != nil {
		return nil, err
	}
	handler12 := marketingModule.Hdl
	handler13 := interactiveModule.Hdl
	searchModule, err := search.InitModule(client, mq, casesModule)
	if err != nil {
		return nil, err
	}
	handler14 := searchModule.Hdl
	roadmapModule := roadmap.InitModule(db, baguwenModule)
	handler15 := roadmapModule.Hdl
	bffModule, err := bff.InitModule(interactiveModule, casesModule, baguwenModule)
	if err != nil {
		return nil, err
	}
	handler16 := bffModule.Hdl
	caseSetHandler := casesModule.CsHdl
	webExamineHandler := casesModule.ExamineHdl
	resumeModule := resume.InitModule(db, casesModule, aiModule)
	projectHandler := resumeModule.PrjHdl
	analysisHandler := resumeModule.AnalysisHandler
	handler17 := aiModule.Hdl
	mockInterviewHandler := aiModule.MockInterviewHdl
	companyModule, err := company.InitModule(db)
	if err != nil {
		return nil, err
	}
	reviewModule := review.InitModule(db, interactiveModule, companyModule, mq, provider, cache)
	handler18 := reviewModule.Hdl
	commentModule, err := comment.InitModule(db, mq, userModule)
	if err != nil {
		return nil, err
	}
	handler19 := commentModule.Hdl
	materialModule, err := material.InitModule(db, mq, clientClient, userModule)
	if err != nil {
		return nil, err
	}
	handler20 := materialModule.Hdl
	interviewModule, err := interview.InitModule(db)
	if err != nil {
		return nil, err
	}
	interviewJourneyHandler := interviewModule.JourneyHdl
	offerHandler := interviewModule.OfferHdl
	handler21 := companyModule.Hdl
	component := initGinxServer(provider, checkMembershipMiddlewareBuilder, localActiveLimit, checkPermissionMiddlewareBuilder, handler, examineHandler, questionSetHandler, webHandler, handler2, handler3, handler4, handler5, handler6, handler7, handler8, handler9, handler10, handler11, handler12, handler13, handler14, handler15, handler16, caseSetHandler, webExamineHandler, projectHandler, analysisHandler, handler17, mockInterviewHandler, handler18, handler19, handler20, interviewJourneyHandler, offerHandler, handler21)
	adminHandler := projectModule.AdminHdl
	webAdminHandler := roadmapModule.AdminHdl
	adminHandler2 := baguwenModule.AdminHdl
	adminQuestionSetHandler := baguwenModule.AdminSetHdl
	adminCaseHandler := casesModule.AdminHandler
	adminCaseSetHandler := casesModule.AdminSetHandler
	adminHandler3 := marketingModule.AdminHdl
	adminHandler4 := aiModule.AdminHandler
	adminHandler5 := reviewModule.AdminHdl
	knowledgeBaseHandler := casesModule.KnowledgeBaseHandler
	webKnowledgeBaseHandler := baguwenModule.KnowledgeBaseHdl
	adminHandler6 := materialModule.AdminHdl
	companyHandler := companyModule.AdminHdl
	adminHandler7 := orderModule.AdminHandler
	adminHandler8 := searchModule.AdminHandler
	adminHandler9 := labelModule.AdminHandler
	adminServer := InitAdminServer(adminHandler, webAdminHandler, adminHandler2, adminQuestionSetHandler, adminCaseHandler, adminCaseSetHandler, adminHandler3, adminHandler4, adminHandler5, knowledgeBaseHandler, webKnowledgeBaseHandler, adminHandler6, companyHandler, adminHandler7, adminHandler8, adminHandler9)
	closeTimeoutOrdersJob := orderModule.CloseTimeoutOrdersJob
	closeTimeoutLockedCreditsJob := creditModule.CloseTimeoutLockedCreditsJob
	syncWechatOrderJob := paymentModule.SyncWechatOrderJob
	reconModule, err := recon.InitModule(orderModule, paymentModule, creditModule)
	if err != nil {
		return nil, err
	}
	syncPaymentAndOrderJob := reconModule.SyncPaymentAndOrderJob
	v := initCronJobs(closeTimeoutOrdersJob, closeTimeoutLockedCreditsJob, syncWechatOrderJob, syncPaymentAndOrderJob)
	knowledgeJobStarter := baguwenModule.KnowledgeJobStarter
	v2 := initJobs(knowledgeJobStarter)
	v3 := initMQConsumers(mq)
	app := &App{
		Web:       component,
		Admin:     adminServer,
		Crons:     v,
		Jobs:      v2,
		Consumers: v3,
	}
	return app, nil
}

// wire.go:

var BaseSet = wire.NewSet(InitDB, InitCache, InitES, InitRedis, InitMQ, InitCosConfig)
