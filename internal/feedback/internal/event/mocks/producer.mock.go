// Code generated by MockGen. DO NOT EDIT.
// Source: ./producer.go
//
// Generated by this command:
//
//	mockgen -source=./producer.go -package=evtmocks -destination=./mocks/producer.mock.go -typed IncreaseCreditsEventProducer
//
// Package evtmocks is a generated GoMock package.
package evtmocks

import (
	context "context"
	reflect "reflect"

	event "github.com/ecodeclub/webook/internal/feedback/internal/event"
	gomock "go.uber.org/mock/gomock"
)

// MockIncreaseCreditsEventProducer is a mock of IncreaseCreditsEventProducer interface.
type MockIncreaseCreditsEventProducer struct {
	ctrl     *gomock.Controller
	recorder *MockIncreaseCreditsEventProducerMockRecorder
}

// MockIncreaseCreditsEventProducerMockRecorder is the mock recorder for MockIncreaseCreditsEventProducer.
type MockIncreaseCreditsEventProducerMockRecorder struct {
	mock *MockIncreaseCreditsEventProducer
}

// NewMockIncreaseCreditsEventProducer creates a new mock instance.
func NewMockIncreaseCreditsEventProducer(ctrl *gomock.Controller) *MockIncreaseCreditsEventProducer {
	mock := &MockIncreaseCreditsEventProducer{ctrl: ctrl}
	mock.recorder = &MockIncreaseCreditsEventProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIncreaseCreditsEventProducer) EXPECT() *MockIncreaseCreditsEventProducerMockRecorder {
	return m.recorder
}

// Produce mocks base method.
func (m *MockIncreaseCreditsEventProducer) Produce(ctx context.Context, evt event.CreditIncreaseEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockIncreaseCreditsEventProducerMockRecorder) Produce(ctx, evt any) *IncreaseCreditsEventProducerProduceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockIncreaseCreditsEventProducer)(nil).Produce), ctx, evt)
	return &IncreaseCreditsEventProducerProduceCall{Call: call}
}

// IncreaseCreditsEventProducerProduceCall wrap *gomock.Call
type IncreaseCreditsEventProducerProduceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IncreaseCreditsEventProducerProduceCall) Return(arg0 error) *IncreaseCreditsEventProducerProduceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IncreaseCreditsEventProducerProduceCall) Do(f func(context.Context, event.CreditIncreaseEvent) error) *IncreaseCreditsEventProducerProduceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IncreaseCreditsEventProducerProduceCall) DoAndReturn(f func(context.Context, event.CreditIncreaseEvent) error) *IncreaseCreditsEventProducerProduceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
