// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package feedback

import (
	"sync"

	"github.com/ecodeclub/mq-api"
	"github.com/ecodeclub/webook/internal/feedback/internal/event"
	"github.com/ecodeclub/webook/internal/feedback/internal/repository"
	"github.com/ecodeclub/webook/internal/feedback/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/feedback/internal/service"
	"github.com/ecodeclub/webook/internal/feedback/internal/web"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitHandler(db *gorm.DB, q mq.MQ) (*web.Handler, error) {
	feedbackDAO := initFeedbackDAO(db)
	feedbackRepository := repository.NewFeedbackRepository(feedbackDAO)
	increaseCreditsEventProducer := initIncreaseCreditsEventProducer(q)
	serviceService := service.NewFeedbackService(feedbackRepository, increaseCreditsEventProducer)
	handler := web.NewHandler(serviceService)
	return handler, nil
}

// wire.go:

var (
	daoOnce = sync.Once{}
	d       dao.FeedbackDAO
)

func initFeedbackDAO(db *gorm.DB) dao.FeedbackDAO {
	daoOnce.Do(func() {
		_ = dao.InitTables(db)
		d = dao.NewFeedBackDAO(db)
	})
	return d
}

func initIncreaseCreditsEventProducer(q mq.MQ) *event.IncreaseCreditsEventProducer {
	producer, err := event.NewIncreaseCreditsEventProducer(q)
	if err != nil {
		panic(err)
	}
	return producer
}

type Handler = web.Handler
