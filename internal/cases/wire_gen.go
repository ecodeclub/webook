// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cases

import (
	"sync"

	"github.com/ecodeclub/ecache"
	"github.com/ecodeclub/ginx/session"
	"github.com/ecodeclub/mq-api"
	"github.com/ecodeclub/webook/internal/ai"
	"github.com/ecodeclub/webook/internal/cases/internal/event"
	"github.com/ecodeclub/webook/internal/cases/internal/repository"
	"github.com/ecodeclub/webook/internal/cases/internal/repository/cache"
	"github.com/ecodeclub/webook/internal/cases/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/cases/internal/service"
	"github.com/ecodeclub/webook/internal/cases/internal/web"
	"github.com/ecodeclub/webook/internal/interactive"
	"github.com/ecodeclub/webook/internal/member"
	"github.com/ego-component/egorm"
	"github.com/olivere/elastic/v7"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *egorm.Component, intrModule *interactive.Module, aiModule *ai.Module, esClient *elastic.Client, memberModule *member.Module, sp session.Provider, redisCache ecache.Cache, q mq.MQ) (*Module, error) {
	caseDAO := InitCaseDAO(db)
	caseCache := cache.NewCaseCache(redisCache)
	caseRepo := repository.NewCaseRepo(caseDAO, caseCache)
	interactiveEventProducer, err := event.NewInteractiveEventProducer(q)
	if err != nil {
		return nil, err
	}
	knowledgeBaseEventProducer := InitKnowledgeBaseEvt(q)
	syncEventProducer, err := event.NewSyncEventProducer(q)
	if err != nil {
		return nil, err
	}
	v := service.NewService(caseRepo, interactiveEventProducer, knowledgeBaseEventProducer, syncEventProducer)
	caseSetDAO := dao.NewCaseSetDAO(db)
	caseSetRepository := repository.NewCaseSetRepo(caseSetDAO)
	v2 := service.NewCaseSetService(caseSetRepository, caseRepo, interactiveEventProducer)
	examineDAO := dao.NewGORMExamineDAO(db)
	examineRepository := repository.NewCachedExamineRepository(examineDAO)
	v3 := aiModule.Svc
	v4 := service.NewLLMExamineService(caseRepo, examineRepository, v3)
	v5 := intrModule.Svc
	v6 := memberModule.Svc
	v7 := web.NewHandler(v, v4, v5, v6, sp)
	v8 := web.NewAdminCaseSetHandler(v2)
	searchSyncService := service.NewCaseSearchSyncService(caseRepo, esClient)
	v9 := web.NewAdminCaseHandler(v, searchSyncService)
	v10 := web.NewExamineHandler(v4)
	v11 := web.NewCaseSetHandler(v2, v4, v5, sp)
	v12 := aiModule.KnowledgeBaseSvc
	knowledgeBaseService := InitKnowledgeBaseSvc(v12, caseRepo)
	v13 := web.NewKnowledgeBaseHandler(knowledgeBaseService)
	module := &Module{
		Svc:                  v,
		SetSvc:               v2,
		ExamineSvc:           v4,
		Hdl:                  v7,
		AdminSetHandler:      v8,
		AdminHandler:         v9,
		ExamineHdl:           v10,
		CsHdl:                v11,
		KnowledgeBaseHandler: v13,
	}
	return module, nil
}

// wire.go:

var daoOnce = sync.Once{}

func InitTableOnce(db *gorm.DB) {
	daoOnce.Do(func() {
		err := dao.InitTables(db)
		if err != nil {
			panic(err)
		}
	})
}

func InitCaseDAO(db *egorm.Component) dao.CaseDAO {
	InitTableOnce(db)
	return dao.NewCaseDao(db)
}
