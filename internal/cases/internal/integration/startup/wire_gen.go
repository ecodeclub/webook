// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"github.com/ecodeclub/ginx/session"
	"github.com/ecodeclub/webook/internal/ai"
	"github.com/ecodeclub/webook/internal/cases"
	"github.com/ecodeclub/webook/internal/cases/internal/event"
	"github.com/ecodeclub/webook/internal/cases/internal/repository"
	"github.com/ecodeclub/webook/internal/cases/internal/repository/cache"
	"github.com/ecodeclub/webook/internal/cases/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/cases/internal/service"
	"github.com/ecodeclub/webook/internal/cases/internal/web"
	"github.com/ecodeclub/webook/internal/interactive"
	"github.com/ecodeclub/webook/internal/member"
	"github.com/ecodeclub/webook/internal/test/ioc"
)

// Injectors from wire.go:

func InitModule(syncProducer event.SyncEventProducer, knowledgeBaseProducer event.KnowledgeBaseEventProducer, aiModule *ai.Module, memberModule *member.Module, sp session.Provider, intrModule *interactive.Module) (*cases.Module, error) {
	v := testioc.InitDB()
	caseDAO := cases.InitCaseDAO(v)
	ecacheCache := testioc.InitCache()
	caseCache := cache.NewCaseCache(ecacheCache)
	caseRepo := repository.NewCaseRepo(caseDAO, caseCache)
	mq := testioc.InitMQ()
	interactiveEventProducer, err := event.NewInteractiveEventProducer(mq)
	if err != nil {
		return nil, err
	}
	serviceService := service.NewService(caseRepo, interactiveEventProducer, knowledgeBaseProducer, syncProducer)
	client := testioc.InitES()
	searchSyncService := service.NewCaseSearchSyncService(caseRepo, client)
	v2 := web.NewAdminCaseHandler(serviceService, searchSyncService)
	examineDAO := dao.NewGORMExamineDAO(v)
	examineRepository := repository.NewCachedExamineRepository(examineDAO)
	v3 := aiModule.Svc
	v4 := service.NewLLMExamineService(caseRepo, examineRepository, v3)
	v5 := intrModule.Svc
	v6 := memberModule.Svc
	v7 := web.NewHandler(serviceService, v4, v5, v6, sp)
	caseSetDAO := dao.NewCaseSetDAO(v)
	caseSetRepository := repository.NewCaseSetRepo(caseSetDAO)
	caseSetService := service.NewCaseSetService(caseSetRepository, caseRepo, interactiveEventProducer)
	v8 := web.NewAdminCaseSetHandler(caseSetService)
	v9 := aiModule.KnowledgeBaseSvc
	knowledgeBaseService := initKnowledgeBaseSvc(v9, caseRepo)
	v10 := web.NewKnowledgeBaseHandler(knowledgeBaseService)
	module := &cases.Module{
		AdminHandler:         v2,
		ExamineSvc:           v4,
		Svc:                  serviceService,
		Hdl:                  v7,
		AdminSetHandler:      v8,
		KnowledgeBaseHandler: v10,
	}
	return module, nil
}

func InitExamModule(syncProducer event.SyncEventProducer, knowledgeBaseProducer event.KnowledgeBaseEventProducer, intrModule *interactive.Module, memberModule *member.Module, sp session.Provider, aiModule *ai.Module) (*cases.Module, error) {
	v := testioc.InitDB()
	caseDAO := cases.InitCaseDAO(v)
	ecacheCache := testioc.InitCache()
	caseCache := cache.NewCaseCache(ecacheCache)
	caseRepo := repository.NewCaseRepo(caseDAO, caseCache)
	mq := testioc.InitMQ()
	interactiveEventProducer, err := event.NewInteractiveEventProducer(mq)
	if err != nil {
		return nil, err
	}
	v2 := service.NewService(caseRepo, interactiveEventProducer, knowledgeBaseProducer, syncProducer)
	caseSetDAO := dao.NewCaseSetDAO(v)
	caseSetRepository := repository.NewCaseSetRepo(caseSetDAO)
	v3 := service.NewCaseSetService(caseSetRepository, caseRepo, interactiveEventProducer)
	examineDAO := dao.NewGORMExamineDAO(v)
	examineRepository := repository.NewCachedExamineRepository(examineDAO)
	v4 := aiModule.Svc
	v5 := service.NewLLMExamineService(caseRepo, examineRepository, v4)
	v6 := intrModule.Svc
	v7 := memberModule.Svc
	v8 := web.NewHandler(v2, v5, v6, v7, sp)
	v9 := web.NewAdminCaseSetHandler(v3)
	client := testioc.InitES()
	searchSyncService := service.NewCaseSearchSyncService(caseRepo, client)
	v10 := web.NewAdminCaseHandler(v2, searchSyncService)
	v11 := web.NewExamineHandler(v5)
	v12 := web.NewCaseSetHandler(v3, v5, v6, sp)
	v13 := aiModule.KnowledgeBaseSvc
	knowledgeBaseService := initKnowledgeBaseSvc(v13, caseRepo)
	v14 := web.NewKnowledgeBaseHandler(knowledgeBaseService)
	module := &cases.Module{
		Svc:                  v2,
		SetSvc:               v3,
		ExamineSvc:           v5,
		Hdl:                  v8,
		AdminSetHandler:      v9,
		AdminHandler:         v10,
		ExamineHdl:           v11,
		CsHdl:                v12,
		KnowledgeBaseHandler: v14,
	}
	return module, nil
}

// wire.go:

func initKnowledgeBaseSvc(svc ai.KnowledgeBaseService, caRepo repository.CaseRepo) service.KnowledgeBaseService {
	return service.NewKnowledgeBaseService(caRepo, svc, "knowledge_id")
}
