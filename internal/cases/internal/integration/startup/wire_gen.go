// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"github.com/ecodeclub/ecache"
	"github.com/ecodeclub/webook/internal/cases"
	"github.com/ecodeclub/webook/internal/cases/internal/event"
	"github.com/ecodeclub/webook/internal/cases/internal/repository"
	"github.com/ecodeclub/webook/internal/cases/internal/repository/cache"
	"github.com/ecodeclub/webook/internal/cases/internal/web"
	"github.com/ecodeclub/webook/internal/test/ioc"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitHandler(p event.SyncEventProducer) (*web.Handler, error) {
	db := testioc.InitDB()
	cache := testioc.InitCache()
	module, err := initModule(db, cache, p)
	if err != nil {
		return nil, err
	}
	handler := module.Hdl
	return handler, nil
}

// wire.go:

func initModule(db *gorm.DB, ec ecache.Cache, p event.SyncEventProducer) (*cases.Module, error) {
	caseDAO := cases.InitCaseDAO(db)
	caseCache := cache.NewCaseCache(ec)
	caseRepo := repository.NewCaseRepo(caseDAO, caseCache)
	service := cases.NewService(caseRepo, p)
	handler := web.NewHandler(service)
	module := &cases.Module{
		Svc: service,
		Hdl: handler,
	}
	return module, nil
}
