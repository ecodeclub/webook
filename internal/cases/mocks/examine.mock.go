// Code generated by MockGen. DO NOT EDIT.
// Source: ./examine.go
//
// Generated by this command:
//
//	mockgen -source=./examine.go -destination=../../mocks/examine.mock.go -package=quemocks -typed=true ExamineService
//
// Package quemocks is a generated GoMock package.
package casemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/cases/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockExamineService is a mock of ExamineService interface.
type MockExamineService struct {
	ctrl     *gomock.Controller
	recorder *MockExamineServiceMockRecorder
}

// MockExamineServiceMockRecorder is the mock recorder for MockExamineService.
type MockExamineServiceMockRecorder struct {
	mock *MockExamineService
}

// NewMockExamineService creates a new mock instance.
func NewMockExamineService(ctrl *gomock.Controller) *MockExamineService {
	mock := &MockExamineService{ctrl: ctrl}
	mock.recorder = &MockExamineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExamineService) EXPECT() *MockExamineServiceMockRecorder {
	return m.recorder
}

// Examine mocks base method.
func (m *MockExamineService) Examine(ctx context.Context, uid, cid int64, input string) (domain.ExamineCaseResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Examine", ctx, uid, cid, input)
	ret0, _ := ret[0].(domain.ExamineCaseResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Examine indicates an expected call of Examine.
func (mr *MockExamineServiceMockRecorder) Examine(ctx, uid, cid, input any) *ExamineServiceExamineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Examine", reflect.TypeOf((*MockExamineService)(nil).Examine), ctx, uid, cid, input)
	return &ExamineServiceExamineCall{Call: call}
}

// ExamineServiceExamineCall wrap *gomock.Call
type ExamineServiceExamineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExamineServiceExamineCall) Return(arg0 domain.ExamineCaseResult, arg1 error) *ExamineServiceExamineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExamineServiceExamineCall) Do(f func(context.Context, int64, int64, string) (domain.ExamineCaseResult, error)) *ExamineServiceExamineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExamineServiceExamineCall) DoAndReturn(f func(context.Context, int64, int64, string) (domain.ExamineCaseResult, error)) *ExamineServiceExamineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResult mocks base method.
func (m *MockExamineService) GetResult(ctx context.Context, uid, cid int64) (domain.CaseResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResult", ctx, uid, cid)
	ret0, _ := ret[0].(domain.CaseResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResult indicates an expected call of GetResult.
func (mr *MockExamineServiceMockRecorder) GetResult(ctx, uid, cid any) *ExamineServiceGetResultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResult", reflect.TypeOf((*MockExamineService)(nil).GetResult), ctx, uid, cid)
	return &ExamineServiceGetResultCall{Call: call}
}

// ExamineServiceGetResultCall wrap *gomock.Call
type ExamineServiceGetResultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExamineServiceGetResultCall) Return(arg0 domain.CaseResult, arg1 error) *ExamineServiceGetResultCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExamineServiceGetResultCall) Do(f func(context.Context, int64, int64) (domain.CaseResult, error)) *ExamineServiceGetResultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExamineServiceGetResultCall) DoAndReturn(f func(context.Context, int64, int64) (domain.CaseResult, error)) *ExamineServiceGetResultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResults mocks base method.
func (m *MockExamineService) GetResults(ctx context.Context, uid int64, ids []int64) (map[int64]domain.ExamineCaseResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResults", ctx, uid, ids)
	ret0, _ := ret[0].(map[int64]domain.ExamineCaseResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResults indicates an expected call of GetResults.
func (mr *MockExamineServiceMockRecorder) GetResults(ctx, uid, ids any) *ExamineServiceGetResultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResults", reflect.TypeOf((*MockExamineService)(nil).GetResults), ctx, uid, ids)
	return &ExamineServiceGetResultsCall{Call: call}
}

// ExamineServiceGetResultsCall wrap *gomock.Call
type ExamineServiceGetResultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExamineServiceGetResultsCall) Return(arg0 map[int64]domain.ExamineCaseResult, arg1 error) *ExamineServiceGetResultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExamineServiceGetResultsCall) Do(f func(context.Context, int64, []int64) (map[int64]domain.ExamineCaseResult, error)) *ExamineServiceGetResultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExamineServiceGetResultsCall) DoAndReturn(f func(context.Context, int64, []int64) (map[int64]domain.ExamineCaseResult, error)) *ExamineServiceGetResultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
