// Code generated by MockGen. DO NOT EDIT.
// Source: ./cases.go
//
// Generated by this command:
//
//	mockgen -source=./cases.go -destination=../../mocks/cases.mock.go -package=casemocks -typed Service
//
// Package casemocks is a generated GoMock package.
package casemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/cases/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Detail mocks base method.
func (m *MockService) Detail(ctx context.Context, caseId int64) (domain.Case, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detail", ctx, caseId)
	ret0, _ := ret[0].(domain.Case)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detail indicates an expected call of Detail.
func (mr *MockServiceMockRecorder) Detail(ctx, caseId any) *ServiceDetailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockService)(nil).Detail), ctx, caseId)
	return &ServiceDetailCall{Call: call}
}

// ServiceDetailCall wrap *gomock.Call
type ServiceDetailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceDetailCall) Return(arg0 domain.Case, arg1 error) *ServiceDetailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceDetailCall) Do(f func(context.Context, int64) (domain.Case, error)) *ServiceDetailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceDetailCall) DoAndReturn(f func(context.Context, int64) (domain.Case, error)) *ServiceDetailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPubByIDs mocks base method.
func (m *MockService) GetPubByIDs(ctx context.Context, ids []int64) ([]domain.Case, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPubByIDs", ctx, ids)
	ret0, _ := ret[0].([]domain.Case)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPubByIDs indicates an expected call of GetPubByIDs.
func (mr *MockServiceMockRecorder) GetPubByIDs(ctx, ids any) *ServiceGetPubByIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPubByIDs", reflect.TypeOf((*MockService)(nil).GetPubByIDs), ctx, ids)
	return &ServiceGetPubByIDsCall{Call: call}
}

// ServiceGetPubByIDsCall wrap *gomock.Call
type ServiceGetPubByIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceGetPubByIDsCall) Return(arg0 []domain.Case, arg1 error) *ServiceGetPubByIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceGetPubByIDsCall) Do(f func(context.Context, []int64) ([]domain.Case, error)) *ServiceGetPubByIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceGetPubByIDsCall) DoAndReturn(f func(context.Context, []int64) ([]domain.Case, error)) *ServiceGetPubByIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockService) List(ctx context.Context, offset, limit int) ([]domain.Case, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, offset, limit)
	ret0, _ := ret[0].([]domain.Case)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockServiceMockRecorder) List(ctx, offset, limit any) *ServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockService)(nil).List), ctx, offset, limit)
	return &ServiceListCall{Call: call}
}

// ServiceListCall wrap *gomock.Call
type ServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceListCall) Return(arg0 []domain.Case, arg1 int64, arg2 error) *ServiceListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceListCall) Do(f func(context.Context, int, int) ([]domain.Case, int64, error)) *ServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceListCall) DoAndReturn(f func(context.Context, int, int) ([]domain.Case, int64, error)) *ServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PubDetail mocks base method.
func (m *MockService) PubDetail(ctx context.Context, caseId int64) (domain.Case, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubDetail", ctx, caseId)
	ret0, _ := ret[0].(domain.Case)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PubDetail indicates an expected call of PubDetail.
func (mr *MockServiceMockRecorder) PubDetail(ctx, caseId any) *ServicePubDetailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubDetail", reflect.TypeOf((*MockService)(nil).PubDetail), ctx, caseId)
	return &ServicePubDetailCall{Call: call}
}

// ServicePubDetailCall wrap *gomock.Call
type ServicePubDetailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServicePubDetailCall) Return(arg0 domain.Case, arg1 error) *ServicePubDetailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServicePubDetailCall) Do(f func(context.Context, int64) (domain.Case, error)) *ServicePubDetailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServicePubDetailCall) DoAndReturn(f func(context.Context, int64) (domain.Case, error)) *ServicePubDetailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PubList mocks base method.
func (m *MockService) PubList(ctx context.Context, offset, limit int) ([]domain.Case, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubList", ctx, offset, limit)
	ret0, _ := ret[0].([]domain.Case)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PubList indicates an expected call of PubList.
func (mr *MockServiceMockRecorder) PubList(ctx, offset, limit any) *ServicePubListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubList", reflect.TypeOf((*MockService)(nil).PubList), ctx, offset, limit)
	return &ServicePubListCall{Call: call}
}

// ServicePubListCall wrap *gomock.Call
type ServicePubListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServicePubListCall) Return(arg0 []domain.Case, arg1 error) *ServicePubListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServicePubListCall) Do(f func(context.Context, int, int) ([]domain.Case, error)) *ServicePubListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServicePubListCall) DoAndReturn(f func(context.Context, int, int) ([]domain.Case, error)) *ServicePubListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Publish mocks base method.
func (m *MockService) Publish(ctx context.Context, ca domain.Case) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, ca)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockServiceMockRecorder) Publish(ctx, ca any) *ServicePublishCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockService)(nil).Publish), ctx, ca)
	return &ServicePublishCall{Call: call}
}

// ServicePublishCall wrap *gomock.Call
type ServicePublishCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServicePublishCall) Return(arg0 int64, arg1 error) *ServicePublishCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServicePublishCall) Do(f func(context.Context, domain.Case) (int64, error)) *ServicePublishCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServicePublishCall) DoAndReturn(f func(context.Context, domain.Case) (int64, error)) *ServicePublishCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockService) Save(ctx context.Context, ca domain.Case) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, ca)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockServiceMockRecorder) Save(ctx, ca any) *ServiceSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockService)(nil).Save), ctx, ca)
	return &ServiceSaveCall{Call: call}
}

// ServiceSaveCall wrap *gomock.Call
type ServiceSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceSaveCall) Return(arg0 int64, arg1 error) *ServiceSaveCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceSaveCall) Do(f func(context.Context, domain.Case) (int64, error)) *ServiceSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceSaveCall) DoAndReturn(f func(context.Context, domain.Case) (int64, error)) *ServiceSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
