// Code generated by MockGen. DO NOT EDIT.
// Source: ./case_set.go
//
// Generated by this command:
//
//	mockgen -source=./case_set.go -destination=../../mocks/case_set.mock.go -package=casemocks -typed CaseSetService
//
// Package casemocks is a generated GoMock package.
package casemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/cases/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCaseSetService is a mock of CaseSetService interface.
type MockCaseSetService struct {
	ctrl     *gomock.Controller
	recorder *MockCaseSetServiceMockRecorder
}

// MockCaseSetServiceMockRecorder is the mock recorder for MockCaseSetService.
type MockCaseSetServiceMockRecorder struct {
	mock *MockCaseSetService
}

// NewMockCaseSetService creates a new mock instance.
func NewMockCaseSetService(ctrl *gomock.Controller) *MockCaseSetService {
	mock := &MockCaseSetService{ctrl: ctrl}
	mock.recorder = &MockCaseSetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaseSetService) EXPECT() *MockCaseSetServiceMockRecorder {
	return m.recorder
}

// Detail mocks base method.
func (m *MockCaseSetService) Detail(ctx context.Context, id int64) (domain.CaseSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detail", ctx, id)
	ret0, _ := ret[0].(domain.CaseSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detail indicates an expected call of Detail.
func (mr *MockCaseSetServiceMockRecorder) Detail(ctx, id any) *CaseSetServiceDetailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockCaseSetService)(nil).Detail), ctx, id)
	return &CaseSetServiceDetailCall{Call: call}
}

// CaseSetServiceDetailCall wrap *gomock.Call
type CaseSetServiceDetailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CaseSetServiceDetailCall) Return(arg0 domain.CaseSet, arg1 error) *CaseSetServiceDetailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CaseSetServiceDetailCall) Do(f func(context.Context, int64) (domain.CaseSet, error)) *CaseSetServiceDetailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CaseSetServiceDetailCall) DoAndReturn(f func(context.Context, int64) (domain.CaseSet, error)) *CaseSetServiceDetailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByBiz mocks base method.
func (m *MockCaseSetService) GetByBiz(ctx context.Context, biz string, bizId int64) (domain.CaseSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBiz", ctx, biz, bizId)
	ret0, _ := ret[0].(domain.CaseSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBiz indicates an expected call of GetByBiz.
func (mr *MockCaseSetServiceMockRecorder) GetByBiz(ctx, biz, bizId any) *CaseSetServiceGetByBizCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBiz", reflect.TypeOf((*MockCaseSetService)(nil).GetByBiz), ctx, biz, bizId)
	return &CaseSetServiceGetByBizCall{Call: call}
}

// CaseSetServiceGetByBizCall wrap *gomock.Call
type CaseSetServiceGetByBizCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CaseSetServiceGetByBizCall) Return(arg0 domain.CaseSet, arg1 error) *CaseSetServiceGetByBizCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CaseSetServiceGetByBizCall) Do(f func(context.Context, string, int64) (domain.CaseSet, error)) *CaseSetServiceGetByBizCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CaseSetServiceGetByBizCall) DoAndReturn(f func(context.Context, string, int64) (domain.CaseSet, error)) *CaseSetServiceGetByBizCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByIds mocks base method.
func (m *MockCaseSetService) GetByIds(ctx context.Context, ids []int64) ([]domain.CaseSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIds", ctx, ids)
	ret0, _ := ret[0].([]domain.CaseSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIds indicates an expected call of GetByIds.
func (mr *MockCaseSetServiceMockRecorder) GetByIds(ctx, ids any) *CaseSetServiceGetByIdsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIds", reflect.TypeOf((*MockCaseSetService)(nil).GetByIds), ctx, ids)
	return &CaseSetServiceGetByIdsCall{Call: call}
}

// CaseSetServiceGetByIdsCall wrap *gomock.Call
type CaseSetServiceGetByIdsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CaseSetServiceGetByIdsCall) Return(arg0 []domain.CaseSet, arg1 error) *CaseSetServiceGetByIdsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CaseSetServiceGetByIdsCall) Do(f func(context.Context, []int64) ([]domain.CaseSet, error)) *CaseSetServiceGetByIdsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CaseSetServiceGetByIdsCall) DoAndReturn(f func(context.Context, []int64) ([]domain.CaseSet, error)) *CaseSetServiceGetByIdsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByIdsWithCases mocks base method.
func (m *MockCaseSetService) GetByIdsWithCases(ctx context.Context, ids []int64) ([]domain.CaseSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdsWithCases", ctx, ids)
	ret0, _ := ret[0].([]domain.CaseSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdsWithCases indicates an expected call of GetByIdsWithCases.
func (mr *MockCaseSetServiceMockRecorder) GetByIdsWithCases(ctx, ids any) *CaseSetServiceGetByIdsWithCasesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdsWithCases", reflect.TypeOf((*MockCaseSetService)(nil).GetByIdsWithCases), ctx, ids)
	return &CaseSetServiceGetByIdsWithCasesCall{Call: call}
}

// CaseSetServiceGetByIdsWithCasesCall wrap *gomock.Call
type CaseSetServiceGetByIdsWithCasesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CaseSetServiceGetByIdsWithCasesCall) Return(arg0 []domain.CaseSet, arg1 error) *CaseSetServiceGetByIdsWithCasesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CaseSetServiceGetByIdsWithCasesCall) Do(f func(context.Context, []int64) ([]domain.CaseSet, error)) *CaseSetServiceGetByIdsWithCasesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CaseSetServiceGetByIdsWithCasesCall) DoAndReturn(f func(context.Context, []int64) ([]domain.CaseSet, error)) *CaseSetServiceGetByIdsWithCasesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCandidates mocks base method.
func (m *MockCaseSetService) GetCandidates(ctx context.Context, id int64, offset, limit int) ([]domain.Case, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidates", ctx, id, offset, limit)
	ret0, _ := ret[0].([]domain.Case)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCandidates indicates an expected call of GetCandidates.
func (mr *MockCaseSetServiceMockRecorder) GetCandidates(ctx, id, offset, limit any) *CaseSetServiceGetCandidatesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidates", reflect.TypeOf((*MockCaseSetService)(nil).GetCandidates), ctx, id, offset, limit)
	return &CaseSetServiceGetCandidatesCall{Call: call}
}

// CaseSetServiceGetCandidatesCall wrap *gomock.Call
type CaseSetServiceGetCandidatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CaseSetServiceGetCandidatesCall) Return(arg0 []domain.Case, arg1 int64, arg2 error) *CaseSetServiceGetCandidatesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CaseSetServiceGetCandidatesCall) Do(f func(context.Context, int64, int, int) ([]domain.Case, int64, error)) *CaseSetServiceGetCandidatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CaseSetServiceGetCandidatesCall) DoAndReturn(f func(context.Context, int64, int, int) ([]domain.Case, int64, error)) *CaseSetServiceGetCandidatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockCaseSetService) List(ctx context.Context, offset, limit int) ([]domain.CaseSet, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, offset, limit)
	ret0, _ := ret[0].([]domain.CaseSet)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockCaseSetServiceMockRecorder) List(ctx, offset, limit any) *CaseSetServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCaseSetService)(nil).List), ctx, offset, limit)
	return &CaseSetServiceListCall{Call: call}
}

// CaseSetServiceListCall wrap *gomock.Call
type CaseSetServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CaseSetServiceListCall) Return(arg0 []domain.CaseSet, arg1 int64, arg2 error) *CaseSetServiceListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CaseSetServiceListCall) Do(f func(context.Context, int, int) ([]domain.CaseSet, int64, error)) *CaseSetServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CaseSetServiceListCall) DoAndReturn(f func(context.Context, int, int) ([]domain.CaseSet, int64, error)) *CaseSetServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListByBiz mocks base method.
func (m *MockCaseSetService) ListByBiz(ctx context.Context, offset, limit int, biz string) ([]domain.CaseSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByBiz", ctx, offset, limit, biz)
	ret0, _ := ret[0].([]domain.CaseSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByBiz indicates an expected call of ListByBiz.
func (mr *MockCaseSetServiceMockRecorder) ListByBiz(ctx, offset, limit, biz any) *CaseSetServiceListByBizCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByBiz", reflect.TypeOf((*MockCaseSetService)(nil).ListByBiz), ctx, offset, limit, biz)
	return &CaseSetServiceListByBizCall{Call: call}
}

// CaseSetServiceListByBizCall wrap *gomock.Call
type CaseSetServiceListByBizCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CaseSetServiceListByBizCall) Return(arg0 []domain.CaseSet, arg1 error) *CaseSetServiceListByBizCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CaseSetServiceListByBizCall) Do(f func(context.Context, int, int, string) ([]domain.CaseSet, error)) *CaseSetServiceListByBizCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CaseSetServiceListByBizCall) DoAndReturn(f func(context.Context, int, int, string) ([]domain.CaseSet, error)) *CaseSetServiceListByBizCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListDefault mocks base method.
func (m *MockCaseSetService) ListDefault(ctx context.Context, offset, limit int) ([]domain.CaseSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDefault", ctx, offset, limit)
	ret0, _ := ret[0].([]domain.CaseSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDefault indicates an expected call of ListDefault.
func (mr *MockCaseSetServiceMockRecorder) ListDefault(ctx, offset, limit any) *CaseSetServiceListDefaultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDefault", reflect.TypeOf((*MockCaseSetService)(nil).ListDefault), ctx, offset, limit)
	return &CaseSetServiceListDefaultCall{Call: call}
}

// CaseSetServiceListDefaultCall wrap *gomock.Call
type CaseSetServiceListDefaultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CaseSetServiceListDefaultCall) Return(arg0 []domain.CaseSet, arg1 error) *CaseSetServiceListDefaultCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CaseSetServiceListDefaultCall) Do(f func(context.Context, int, int) ([]domain.CaseSet, error)) *CaseSetServiceListDefaultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CaseSetServiceListDefaultCall) DoAndReturn(f func(context.Context, int, int) ([]domain.CaseSet, error)) *CaseSetServiceListDefaultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockCaseSetService) Save(ctx context.Context, set domain.CaseSet) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, set)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockCaseSetServiceMockRecorder) Save(ctx, set any) *CaseSetServiceSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCaseSetService)(nil).Save), ctx, set)
	return &CaseSetServiceSaveCall{Call: call}
}

// CaseSetServiceSaveCall wrap *gomock.Call
type CaseSetServiceSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CaseSetServiceSaveCall) Return(arg0 int64, arg1 error) *CaseSetServiceSaveCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CaseSetServiceSaveCall) Do(f func(context.Context, domain.CaseSet) (int64, error)) *CaseSetServiceSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CaseSetServiceSaveCall) DoAndReturn(f func(context.Context, domain.CaseSet) (int64, error)) *CaseSetServiceSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCases mocks base method.
func (m *MockCaseSetService) UpdateCases(ctx context.Context, set domain.CaseSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCases", ctx, set)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCases indicates an expected call of UpdateCases.
func (mr *MockCaseSetServiceMockRecorder) UpdateCases(ctx, set any) *CaseSetServiceUpdateCasesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCases", reflect.TypeOf((*MockCaseSetService)(nil).UpdateCases), ctx, set)
	return &CaseSetServiceUpdateCasesCall{Call: call}
}

// CaseSetServiceUpdateCasesCall wrap *gomock.Call
type CaseSetServiceUpdateCasesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CaseSetServiceUpdateCasesCall) Return(arg0 error) *CaseSetServiceUpdateCasesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CaseSetServiceUpdateCasesCall) Do(f func(context.Context, domain.CaseSet) error) *CaseSetServiceUpdateCasesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CaseSetServiceUpdateCasesCall) DoAndReturn(f func(context.Context, domain.CaseSet) error) *CaseSetServiceUpdateCasesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
