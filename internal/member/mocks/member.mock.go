// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -source=./service.go -package=membermocks --destination=../../mocks/member.mock.go -typed Service
//
// Package membermocks is a generated GoMock package.
package membermocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/member/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ActivateMembership mocks base method.
func (m *MockService) ActivateMembership(ctx context.Context, member domain.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateMembership", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateMembership indicates an expected call of ActivateMembership.
func (mr *MockServiceMockRecorder) ActivateMembership(ctx, member any) *ServiceActivateMembershipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateMembership", reflect.TypeOf((*MockService)(nil).ActivateMembership), ctx, member)
	return &ServiceActivateMembershipCall{Call: call}
}

// ServiceActivateMembershipCall wrap *gomock.Call
type ServiceActivateMembershipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceActivateMembershipCall) Return(arg0 error) *ServiceActivateMembershipCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceActivateMembershipCall) Do(f func(context.Context, domain.Member) error) *ServiceActivateMembershipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceActivateMembershipCall) DoAndReturn(f func(context.Context, domain.Member) error) *ServiceActivateMembershipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateNewMembership mocks base method.
func (m *MockService) CreateNewMembership(ctx context.Context, member domain.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewMembership", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewMembership indicates an expected call of CreateNewMembership.
func (mr *MockServiceMockRecorder) CreateNewMembership(ctx, member any) *ServiceCreateNewMembershipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewMembership", reflect.TypeOf((*MockService)(nil).CreateNewMembership), ctx, member)
	return &ServiceCreateNewMembershipCall{Call: call}
}

// ServiceCreateNewMembershipCall wrap *gomock.Call
type ServiceCreateNewMembershipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceCreateNewMembershipCall) Return(arg0 error) *ServiceCreateNewMembershipCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceCreateNewMembershipCall) Do(f func(context.Context, domain.Member) error) *ServiceCreateNewMembershipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceCreateNewMembershipCall) DoAndReturn(f func(context.Context, domain.Member) error) *ServiceCreateNewMembershipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMembershipInfo mocks base method.
func (m *MockService) GetMembershipInfo(ctx context.Context, userID int64) (domain.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembershipInfo", ctx, userID)
	ret0, _ := ret[0].(domain.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembershipInfo indicates an expected call of GetMembershipInfo.
func (mr *MockServiceMockRecorder) GetMembershipInfo(ctx, userID any) *ServiceGetMembershipInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembershipInfo", reflect.TypeOf((*MockService)(nil).GetMembershipInfo), ctx, userID)
	return &ServiceGetMembershipInfoCall{Call: call}
}

// ServiceGetMembershipInfoCall wrap *gomock.Call
type ServiceGetMembershipInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceGetMembershipInfoCall) Return(arg0 domain.Member, arg1 error) *ServiceGetMembershipInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceGetMembershipInfoCall) Do(f func(context.Context, int64) (domain.Member, error)) *ServiceGetMembershipInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceGetMembershipInfoCall) DoAndReturn(f func(context.Context, int64) (domain.Member, error)) *ServiceGetMembershipInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
