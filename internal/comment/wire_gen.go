// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package comment

import (
	"sync"

	"github.com/ecodeclub/mq-api"
	"github.com/ecodeclub/webook/internal/comment/internal/event"
	"github.com/ecodeclub/webook/internal/comment/internal/repository"
	"github.com/ecodeclub/webook/internal/comment/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/comment/internal/service"
	"github.com/ecodeclub/webook/internal/comment/internal/web"
	"github.com/ecodeclub/webook/internal/user"
	"github.com/ego-component/egorm"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *gorm.DB, q mq.MQ, userModule *user.Module) (*Module, error) {
	userService := userModule.Svc
	commentDAO, err := initCommentDAO(db)
	if err != nil {
		return nil, err
	}
	commentRepository := repository.NewCommentRepository(commentDAO)
	commentService := service.NewCommentService(userService, commentRepository)
	wechatRobotEventProducer, err := event.NewQYWeChatEventProducer(q)
	if err != nil {
		return nil, err
	}
	handler := web.NewHandler(commentService, wechatRobotEventProducer)
	module := &Module{
		Hdl: handler,
	}
	return module, nil
}

// wire.go:

var once = &sync.Once{}

func initCommentDAO(db *egorm.Component) (dao.CommentDAO, error) {
	var err error
	once.Do(func() {
		err = dao.InitTables(db)
	})
	if err != nil {
		return nil, err
	}
	return dao.NewCommentGORMDAO(db), nil
}
