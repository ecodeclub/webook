// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package interactive

import (
	"context"
	"sync"

	"github.com/ecodeclub/mq-api"
	"github.com/ecodeclub/webook/internal/interactive/internal/events"
	"github.com/ecodeclub/webook/internal/interactive/internal/repository"
	"github.com/ecodeclub/webook/internal/interactive/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/interactive/internal/service"
	"github.com/ecodeclub/webook/internal/interactive/internal/web"
	"github.com/ego-component/egorm"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *gorm.DB, q mq.MQ) (*Module, error) {
	interactiveDAO := InitTablesOnce(db)
	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveDAO)
	interactiveService := service.NewService(interactiveRepository)
	consumer := initConsumer(interactiveService, q)
	handler := web.NewHandler(interactiveService)
	module := &Module{
		Svc: interactiveService,
		c:   consumer,
		Hdl: handler,
	}
	return module, nil
}

// wire.go:

var HandlerSet = wire.NewSet(
	InitTablesOnce, repository.NewCachedInteractiveRepository, service.NewService, web.NewHandler,
)

var once = &sync.Once{}

func InitTablesOnce(db *egorm.Component) dao.InteractiveDAO {
	once.Do(func() {
		_ = dao.InitTables(db)
	})
	return dao.NewInteractiveDAO(db)
}

func initConsumer(svc service.InteractiveService, q mq.MQ) *events.Consumer {
	consumer, err := events.NewSyncConsumer(svc, q)
	if err != nil {
		panic(err)
	}
	consumer.Start(context.Background())
	return consumer
}

type Handler = web.Handler

type InteractiveSvc = service.InteractiveService
