// Code generated by MockGen. DO NOT EDIT.
// Source: ./interactive.go
//
// Generated by this command:
//
//	mockgen -source=./interactive.go -destination=../../mocks/interactive.mock.go -package=intrmocks -typed InteractiveService
//
// Package intrmocks is a generated GoMock package.
package intrmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/interactive/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CollectToggle mocks base method.
func (m *MockService) CollectToggle(ctx context.Context, biz string, bizId, uid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectToggle", ctx, biz, bizId, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectToggle indicates an expected call of CollectToggle.
func (mr *MockServiceMockRecorder) CollectToggle(ctx, biz, bizId, uid any) *ServiceCollectToggleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectToggle", reflect.TypeOf((*MockService)(nil).CollectToggle), ctx, biz, bizId, uid)
	return &ServiceCollectToggleCall{Call: call}
}

// ServiceCollectToggleCall wrap *gomock.Call
type ServiceCollectToggleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceCollectToggleCall) Return(arg0 error) *ServiceCollectToggleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceCollectToggleCall) Do(f func(context.Context, string, int64, int64) error) *ServiceCollectToggleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceCollectToggleCall) DoAndReturn(f func(context.Context, string, int64, int64) error) *ServiceCollectToggleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockService) Get(ctx context.Context, biz string, id, uid int64) (domain.Interactive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, biz, id, uid)
	ret0, _ := ret[0].(domain.Interactive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(ctx, biz, id, uid any) *ServiceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), ctx, biz, id, uid)
	return &ServiceGetCall{Call: call}
}

// ServiceGetCall wrap *gomock.Call
type ServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceGetCall) Return(arg0 domain.Interactive, arg1 error) *ServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceGetCall) Do(f func(context.Context, string, int64, int64) (domain.Interactive, error)) *ServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceGetCall) DoAndReturn(f func(context.Context, string, int64, int64) (domain.Interactive, error)) *ServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByIds mocks base method.
func (m *MockService) GetByIds(ctx context.Context, biz string, ids []int64) (map[int64]domain.Interactive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIds", ctx, biz, ids)
	ret0, _ := ret[0].(map[int64]domain.Interactive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIds indicates an expected call of GetByIds.
func (mr *MockServiceMockRecorder) GetByIds(ctx, biz, ids any) *ServiceGetByIdsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIds", reflect.TypeOf((*MockService)(nil).GetByIds), ctx, biz, ids)
	return &ServiceGetByIdsCall{Call: call}
}

// ServiceGetByIdsCall wrap *gomock.Call
type ServiceGetByIdsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceGetByIdsCall) Return(arg0 map[int64]domain.Interactive, arg1 error) *ServiceGetByIdsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceGetByIdsCall) Do(f func(context.Context, string, []int64) (map[int64]domain.Interactive, error)) *ServiceGetByIdsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceGetByIdsCall) DoAndReturn(f func(context.Context, string, []int64) (map[int64]domain.Interactive, error)) *ServiceGetByIdsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IncrReadCnt mocks base method.
func (m *MockService) IncrReadCnt(ctx context.Context, biz string, bizId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrReadCnt", ctx, biz, bizId)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrReadCnt indicates an expected call of IncrReadCnt.
func (mr *MockServiceMockRecorder) IncrReadCnt(ctx, biz, bizId any) *ServiceIncrReadCntCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrReadCnt", reflect.TypeOf((*MockService)(nil).IncrReadCnt), ctx, biz, bizId)
	return &ServiceIncrReadCntCall{Call: call}
}

// ServiceIncrReadCntCall wrap *gomock.Call
type ServiceIncrReadCntCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceIncrReadCntCall) Return(arg0 error) *ServiceIncrReadCntCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceIncrReadCntCall) Do(f func(context.Context, string, int64) error) *ServiceIncrReadCntCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceIncrReadCntCall) DoAndReturn(f func(context.Context, string, int64) error) *ServiceIncrReadCntCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LikeToggle mocks base method.
func (m *MockService) LikeToggle(c context.Context, biz string, id, uid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeToggle", c, biz, id, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeToggle indicates an expected call of LikeToggle.
func (mr *MockServiceMockRecorder) LikeToggle(c, biz, id, uid any) *ServiceLikeToggleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeToggle", reflect.TypeOf((*MockService)(nil).LikeToggle), c, biz, id, uid)
	return &ServiceLikeToggleCall{Call: call}
}

// ServiceLikeToggleCall wrap *gomock.Call
type ServiceLikeToggleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *ServiceLikeToggleCall) Return(arg0 error) *ServiceLikeToggleCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *ServiceLikeToggleCall) Do(f func(context.Context, string, int64, int64) error) *ServiceLikeToggleCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *ServiceLikeToggleCall) DoAndReturn(f func(context.Context, string, int64, int64) error) *ServiceLikeToggleCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}
