// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package label

import (
	"sync"

	"github.com/ecodeclub/webook/internal/label/internal/repository"
	"github.com/ecodeclub/webook/internal/label/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/label/internal/service"
	"github.com/ecodeclub/webook/internal/label/internal/web"
	"github.com/ego-component/egorm"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitModule(db *egorm.Component) *Module {
	labelDAO := InitTablesOnce(db)
	labelRepository := repository.NewCachedLabelRepository(labelDAO)
	serviceService := service.NewService(labelRepository)
	v := web.NewAdminHandler(serviceService)
	v2 := web.NewHandler(serviceService)
	module := &Module{
		AdminHandler: v,
		Handler:      v2,
	}
	return module
}

// wire.go:

type Module struct {
	AdminHandler *AdminHandler
	Handler      *Handler
}

var ModuleSet = wire.NewSet(repository.NewCachedLabelRepository, InitTablesOnce, service.NewService, web.NewHandler, web.NewAdminHandler)

var once = &sync.Once{}

func InitTablesOnce(db *egorm.Component) dao.LabelDAO {
	once.Do(func() {
		err := dao.InitTables(db)
		if err != nil {
			panic(err)
		}
	})
	return dao.NewLabelGORMDAO(db)
}

type AdminHandler = web.AdminHandler

type Handler = web.Handler
