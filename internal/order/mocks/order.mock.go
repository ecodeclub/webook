// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -source=./service.go -package=ordermocks -destination=../../mocks/order.mock.go -typed Service
//

// Package ordermocks is a generated GoMock package.
package ordermocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/order/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockService) CancelOrder(ctx context.Context, uid, oid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", ctx, uid, oid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockServiceMockRecorder) CancelOrder(ctx, uid, oid any) *MockServiceCancelOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockService)(nil).CancelOrder), ctx, uid, oid)
	return &MockServiceCancelOrderCall{Call: call}
}

// MockServiceCancelOrderCall wrap *gomock.Call
type MockServiceCancelOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCancelOrderCall) Return(arg0 error) *MockServiceCancelOrderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCancelOrderCall) Do(f func(context.Context, int64, int64) error) *MockServiceCancelOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCancelOrderCall) DoAndReturn(f func(context.Context, int64, int64) error) *MockServiceCancelOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloseTimeoutOrders mocks base method.
func (m *MockService) CloseTimeoutOrders(ctx context.Context, orderIDs []int64, ctime int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseTimeoutOrders", ctx, orderIDs, ctime)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseTimeoutOrders indicates an expected call of CloseTimeoutOrders.
func (mr *MockServiceMockRecorder) CloseTimeoutOrders(ctx, orderIDs, ctime any) *MockServiceCloseTimeoutOrdersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseTimeoutOrders", reflect.TypeOf((*MockService)(nil).CloseTimeoutOrders), ctx, orderIDs, ctime)
	return &MockServiceCloseTimeoutOrdersCall{Call: call}
}

// MockServiceCloseTimeoutOrdersCall wrap *gomock.Call
type MockServiceCloseTimeoutOrdersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCloseTimeoutOrdersCall) Return(arg0 error) *MockServiceCloseTimeoutOrdersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCloseTimeoutOrdersCall) Do(f func(context.Context, []int64, int64) error) *MockServiceCloseTimeoutOrdersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCloseTimeoutOrdersCall) DoAndReturn(f func(context.Context, []int64, int64) error) *MockServiceCloseTimeoutOrdersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOrder mocks base method.
func (m *MockService) CreateOrder(ctx context.Context, order domain.Order) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockServiceMockRecorder) CreateOrder(ctx, order any) *MockServiceCreateOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockService)(nil).CreateOrder), ctx, order)
	return &MockServiceCreateOrderCall{Call: call}
}

// MockServiceCreateOrderCall wrap *gomock.Call
type MockServiceCreateOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateOrderCall) Return(arg0 domain.Order, arg1 error) *MockServiceCreateOrderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateOrderCall) Do(f func(context.Context, domain.Order) (domain.Order, error)) *MockServiceCreateOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateOrderCall) DoAndReturn(f func(context.Context, domain.Order) (domain.Order, error)) *MockServiceCreateOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FailOrder mocks base method.
func (m *MockService) FailOrder(ctx context.Context, uid int64, orderSN string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailOrder", ctx, uid, orderSN)
	ret0, _ := ret[0].(error)
	return ret0
}

// FailOrder indicates an expected call of FailOrder.
func (mr *MockServiceMockRecorder) FailOrder(ctx, uid, orderSN any) *MockServiceFailOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailOrder", reflect.TypeOf((*MockService)(nil).FailOrder), ctx, uid, orderSN)
	return &MockServiceFailOrderCall{Call: call}
}

// MockServiceFailOrderCall wrap *gomock.Call
type MockServiceFailOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFailOrderCall) Return(arg0 error) *MockServiceFailOrderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFailOrderCall) Do(f func(context.Context, int64, string) error) *MockServiceFailOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFailOrderCall) DoAndReturn(f func(context.Context, int64, string) error) *MockServiceFailOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindTimeoutOrders mocks base method.
func (m *MockService) FindTimeoutOrders(ctx context.Context, offset, limit int, ctime int64) ([]domain.Order, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTimeoutOrders", ctx, offset, limit, ctime)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindTimeoutOrders indicates an expected call of FindTimeoutOrders.
func (mr *MockServiceMockRecorder) FindTimeoutOrders(ctx, offset, limit, ctime any) *MockServiceFindTimeoutOrdersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTimeoutOrders", reflect.TypeOf((*MockService)(nil).FindTimeoutOrders), ctx, offset, limit, ctime)
	return &MockServiceFindTimeoutOrdersCall{Call: call}
}

// MockServiceFindTimeoutOrdersCall wrap *gomock.Call
type MockServiceFindTimeoutOrdersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFindTimeoutOrdersCall) Return(arg0 []domain.Order, arg1 int64, arg2 error) *MockServiceFindTimeoutOrdersCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFindTimeoutOrdersCall) Do(f func(context.Context, int, int, int64) ([]domain.Order, int64, error)) *MockServiceFindTimeoutOrdersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFindTimeoutOrdersCall) DoAndReturn(f func(context.Context, int, int, int64) ([]domain.Order, int64, error)) *MockServiceFindTimeoutOrdersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindUserVisibleOrderByUIDAndSN mocks base method.
func (m *MockService) FindUserVisibleOrderByUIDAndSN(ctx context.Context, uid int64, orderSN string) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserVisibleOrderByUIDAndSN", ctx, uid, orderSN)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserVisibleOrderByUIDAndSN indicates an expected call of FindUserVisibleOrderByUIDAndSN.
func (mr *MockServiceMockRecorder) FindUserVisibleOrderByUIDAndSN(ctx, uid, orderSN any) *MockServiceFindUserVisibleOrderByUIDAndSNCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserVisibleOrderByUIDAndSN", reflect.TypeOf((*MockService)(nil).FindUserVisibleOrderByUIDAndSN), ctx, uid, orderSN)
	return &MockServiceFindUserVisibleOrderByUIDAndSNCall{Call: call}
}

// MockServiceFindUserVisibleOrderByUIDAndSNCall wrap *gomock.Call
type MockServiceFindUserVisibleOrderByUIDAndSNCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFindUserVisibleOrderByUIDAndSNCall) Return(arg0 domain.Order, arg1 error) *MockServiceFindUserVisibleOrderByUIDAndSNCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFindUserVisibleOrderByUIDAndSNCall) Do(f func(context.Context, int64, string) (domain.Order, error)) *MockServiceFindUserVisibleOrderByUIDAndSNCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFindUserVisibleOrderByUIDAndSNCall) DoAndReturn(f func(context.Context, int64, string) (domain.Order, error)) *MockServiceFindUserVisibleOrderByUIDAndSNCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindUserVisibleOrdersByUID mocks base method.
func (m *MockService) FindUserVisibleOrdersByUID(ctx context.Context, uid int64, status domain.OrderStatus, offset, limit int) ([]domain.Order, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserVisibleOrdersByUID", ctx, uid, status, offset, limit)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindUserVisibleOrdersByUID indicates an expected call of FindUserVisibleOrdersByUID.
func (mr *MockServiceMockRecorder) FindUserVisibleOrdersByUID(ctx, uid, status, offset, limit any) *MockServiceFindUserVisibleOrdersByUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserVisibleOrdersByUID", reflect.TypeOf((*MockService)(nil).FindUserVisibleOrdersByUID), ctx, uid, status, offset, limit)
	return &MockServiceFindUserVisibleOrdersByUIDCall{Call: call}
}

// MockServiceFindUserVisibleOrdersByUIDCall wrap *gomock.Call
type MockServiceFindUserVisibleOrdersByUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFindUserVisibleOrdersByUIDCall) Return(arg0 []domain.Order, arg1 int64, arg2 error) *MockServiceFindUserVisibleOrdersByUIDCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFindUserVisibleOrdersByUIDCall) Do(f func(context.Context, int64, domain.OrderStatus, int, int) ([]domain.Order, int64, error)) *MockServiceFindUserVisibleOrdersByUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFindUserVisibleOrdersByUIDCall) DoAndReturn(f func(context.Context, int64, domain.OrderStatus, int, int) ([]domain.Order, int64, error)) *MockServiceFindUserVisibleOrdersByUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SucceedOrder mocks base method.
func (m *MockService) SucceedOrder(ctx context.Context, uid int64, orderSN string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SucceedOrder", ctx, uid, orderSN)
	ret0, _ := ret[0].(error)
	return ret0
}

// SucceedOrder indicates an expected call of SucceedOrder.
func (mr *MockServiceMockRecorder) SucceedOrder(ctx, uid, orderSN any) *MockServiceSucceedOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SucceedOrder", reflect.TypeOf((*MockService)(nil).SucceedOrder), ctx, uid, orderSN)
	return &MockServiceSucceedOrderCall{Call: call}
}

// MockServiceSucceedOrderCall wrap *gomock.Call
type MockServiceSucceedOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSucceedOrderCall) Return(arg0 error) *MockServiceSucceedOrderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSucceedOrderCall) Do(f func(context.Context, int64, string) error) *MockServiceSucceedOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSucceedOrderCall) DoAndReturn(f func(context.Context, int64, string) error) *MockServiceSucceedOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUnpaidOrderPaymentInfo mocks base method.
func (m *MockService) UpdateUnpaidOrderPaymentInfo(ctx context.Context, uid, oid, pid int64, psn string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUnpaidOrderPaymentInfo", ctx, uid, oid, pid, psn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUnpaidOrderPaymentInfo indicates an expected call of UpdateUnpaidOrderPaymentInfo.
func (mr *MockServiceMockRecorder) UpdateUnpaidOrderPaymentInfo(ctx, uid, oid, pid, psn any) *MockServiceUpdateUnpaidOrderPaymentInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnpaidOrderPaymentInfo", reflect.TypeOf((*MockService)(nil).UpdateUnpaidOrderPaymentInfo), ctx, uid, oid, pid, psn)
	return &MockServiceUpdateUnpaidOrderPaymentInfoCall{Call: call}
}

// MockServiceUpdateUnpaidOrderPaymentInfoCall wrap *gomock.Call
type MockServiceUpdateUnpaidOrderPaymentInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateUnpaidOrderPaymentInfoCall) Return(arg0 error) *MockServiceUpdateUnpaidOrderPaymentInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateUnpaidOrderPaymentInfoCall) Do(f func(context.Context, int64, int64, int64, string) error) *MockServiceUpdateUnpaidOrderPaymentInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateUnpaidOrderPaymentInfoCall) DoAndReturn(f func(context.Context, int64, int64, int64, string) error) *MockServiceUpdateUnpaidOrderPaymentInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
