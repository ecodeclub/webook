// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package order

import (
	"context"
	"sync"

	"github.com/ecodeclub/ecache"
	"github.com/ecodeclub/mq-api"
	"github.com/ecodeclub/webook/internal/credit"
	"github.com/ecodeclub/webook/internal/order/internal/domain"
	"github.com/ecodeclub/webook/internal/order/internal/event"
	"github.com/ecodeclub/webook/internal/order/internal/job"
	"github.com/ecodeclub/webook/internal/order/internal/repository"
	"github.com/ecodeclub/webook/internal/order/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/order/internal/service"
	"github.com/ecodeclub/webook/internal/order/internal/web"
	"github.com/ecodeclub/webook/internal/payment"
	"github.com/ecodeclub/webook/internal/pkg/sequencenumber"
	"github.com/ecodeclub/webook/internal/product"
	"github.com/ego-component/egorm"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *egorm.Component, cache ecache.Cache, q mq.MQ, pm *payment.Module, ppm *product.Module, cm *credit.Module) (*Module, error) {
	service := InitService(db)
	v := InitHandler(cache, service, pm, ppm, cm)
	v2 := web.NewAdminHandler(service)
	orderEventProducer, err := event.NewOrderEventProducer(q)
	if err != nil {
		return nil, err
	}
	paymentConsumer := initCompleteOrderConsumer(service, orderEventProducer, q)
	v3 := initCloseExpiredOrdersJob(service)
	module := &Module{
		Hdl:                   v,
		AdminHandler:          v2,
		c:                     paymentConsumer,
		Svc:                   service,
		CloseTimeoutOrdersJob: v3,
	}
	return module, nil
}

func InitHandler(cache ecache.Cache, svc2 service.Service, pm *payment.Module, ppm *product.Module, cm *credit.Module) *Handler {
	v := pm.Svc
	v2 := ppm.Svc
	v3 := cm.Svc
	generator := sequencenumber.NewGenerator()
	v4 := web.NewHandler(svc2, v, v2, v3, generator, cache)
	return v4
}

// wire.go:

type (
	Handler               = web.Handler
	AdminHandler          = web.AdminHandler
	Service               = service.Service
	CloseTimeoutOrdersJob = job.CloseTimeoutOrdersJob
	Order                 = domain.Order
	Item                  = domain.OrderItem
	SPU                   = domain.SPU
	SKU                   = domain.SKU
	Status                = domain.OrderStatus
	Payment               = domain.Payment
)

const (
	StatusInit       = domain.StatusInit
	StatusProcessing = domain.StatusProcessing
	StatusSuccess    = domain.StatusSuccess
	StatusFailed     = domain.StatusFailed
)

var (
	once = &sync.Once{}
	svc  service.Service
)

func InitService(db *gorm.DB) service.Service {
	once.Do(func() {
		_ = dao.InitTables(db)
		orderDAO := dao.NewOrderGORMDAO(db)
		orderRepository := repository.NewRepository(orderDAO)
		svc = service.NewService(orderRepository)
	})
	return svc
}

func initCompleteOrderConsumer(svc2 service.Service, p event.OrderEventProducer, q mq.MQ) *event.PaymentConsumer {
	consumer, err := event.NewPaymentConsumer(svc2, p, q)
	if err != nil {
		panic(err)
	}
	consumer.Start(context.Background())
	return consumer
}

func initCloseExpiredOrdersJob(svc2 service.Service) *CloseTimeoutOrdersJob {
	minutes := int64(30)
	seconds := int64(10)
	limit := 100
	return job.NewCloseTimeoutOrdersJob(svc2, minutes, seconds, limit)
}
