// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package order

import (
	"context"
	"sync"

	"github.com/ecodeclub/ecache"
	"github.com/ecodeclub/mq-api"
	"github.com/ecodeclub/webook/internal/credit"
	"github.com/ecodeclub/webook/internal/order/internal/event"
	"github.com/ecodeclub/webook/internal/order/internal/job"
	"github.com/ecodeclub/webook/internal/order/internal/repository"
	"github.com/ecodeclub/webook/internal/order/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/order/internal/service"
	"github.com/ecodeclub/webook/internal/order/internal/web"
	"github.com/ecodeclub/webook/internal/payment"
	"github.com/ecodeclub/webook/internal/pkg/sequencenumber"
	"github.com/ecodeclub/webook/internal/product"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *gorm.DB, cache ecache.Cache, q mq.MQ, pm *payment.Module, ppm *product.Module, cm *credit.Module) (*Module, error) {
	service := InitService(db)
	handler := InitHandler(cache, service, pm, ppm, cm)
	completeOrderConsumer := initCompleteOrderConsumer(service, q)
	closeTimeoutOrdersJob := initCloseExpiredOrdersJob(service)
	module := &Module{
		Hdl:                       handler,
		c:                         completeOrderConsumer,
		Svc:                       service,
		CloseExpiredOrdersCronJob: closeTimeoutOrdersJob,
	}
	return module, nil
}

func InitHandler(cache ecache.Cache, svc2 service.Service, pm *payment.Module, ppm *product.Module, cm *credit.Module) *web.Handler {
	serviceService := pm.Svc
	service2 := ppm.Svc
	service3 := cm.Svc
	generator := sequencenumber.NewGenerator()
	handler := web.NewHandler(svc2, serviceService, service2, service3, generator, cache)
	return handler
}

// wire.go:

type Handler = web.Handler

type Service = service.Service

type CloseTimeoutOrdersJob = job.CloseTimeoutOrdersJob

var HandlerSet = wire.NewSet(sequencenumber.NewGenerator, web.NewHandler)

var (
	once = &sync.Once{}
	svc  service.Service
)

func InitService(db *gorm.DB) service.Service {
	once.Do(func() {
		_ = dao.InitTables(db)
		orderDAO := dao.NewOrderGORMDAO(db)
		orderRepository := repository.NewRepository(orderDAO)
		svc = service.NewService(orderRepository)
	})
	return svc
}

func initCompleteOrderConsumer(svc2 service.Service, q mq.MQ) *event.CompleteOrderConsumer {
	consumer, err := event.NewCompleteOrderConsumer(svc2, q)
	if err != nil {
		panic(err)
	}
	consumer.Start(context.Background())
	return consumer
}

func initCloseExpiredOrdersJob(svc2 service.Service) *CloseTimeoutOrdersJob {
	minutes := int64(30)
	seconds := int64(10)
	limit := 100
	return job.NewCloseExpiredOrdersJob(svc2, minutes, seconds, limit)
}
