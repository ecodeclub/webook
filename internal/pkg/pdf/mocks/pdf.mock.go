// Code generated by MockGen. DO NOT EDIT.
// Source: ./pdf.go
//
// Generated by this command:
//
//	mockgen -source=./pdf.go -package=pdfmocks -destination=./mocks/pdf.mock.go -typed Converter
//

// Package pdfmocks is a generated GoMock package.
package pdfmocks

import (
	context "context"
	reflect "reflect"

	pdf "github.com/ecodeclub/webook/internal/pkg/pdf"
	gomock "go.uber.org/mock/gomock"
)

// MockConverter is a mock of Converter interface.
type MockConverter struct {
	ctrl     *gomock.Controller
	recorder *MockConverterMockRecorder
	isgomock struct{}
}

// MockConverterMockRecorder is the mock recorder for MockConverter.
type MockConverterMockRecorder struct {
	mock *MockConverter
}

// NewMockConverter creates a new mock instance.
func NewMockConverter(ctrl *gomock.Controller) *MockConverter {
	mock := &MockConverter{ctrl: ctrl}
	mock.recorder = &MockConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverter) EXPECT() *MockConverterMockRecorder {
	return m.recorder
}

// ConvertHTMLToPDF mocks base method.
func (m *MockConverter) ConvertHTMLToPDF(ctx context.Context, html string, opts ...pdf.Option) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, html}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConvertHTMLToPDF", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertHTMLToPDF indicates an expected call of ConvertHTMLToPDF.
func (mr *MockConverterMockRecorder) ConvertHTMLToPDF(ctx, html any, opts ...any) *MockConverterConvertHTMLToPDFCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, html}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertHTMLToPDF", reflect.TypeOf((*MockConverter)(nil).ConvertHTMLToPDF), varargs...)
	return &MockConverterConvertHTMLToPDFCall{Call: call}
}

// MockConverterConvertHTMLToPDFCall wrap *gomock.Call
type MockConverterConvertHTMLToPDFCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConverterConvertHTMLToPDFCall) Return(arg0 []byte, arg1 error) *MockConverterConvertHTMLToPDFCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConverterConvertHTMLToPDFCall) Do(f func(context.Context, string, ...pdf.Option) ([]byte, error)) *MockConverterConvertHTMLToPDFCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConverterConvertHTMLToPDFCall) DoAndReturn(f func(context.Context, string, ...pdf.Option) ([]byte, error)) *MockConverterConvertHTMLToPDFCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
