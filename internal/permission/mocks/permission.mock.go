// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -package=permissionmocks -destination=../../mocks/permission.mock.go -typed Service
//
// Package permissionmocks is a generated GoMock package.
package permissionmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/permission/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreatePersonalPermission mocks base method.
func (m *MockService) CreatePersonalPermission(ctx context.Context, ps []domain.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePersonalPermission", ctx, ps)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePersonalPermission indicates an expected call of CreatePersonalPermission.
func (mr *MockServiceMockRecorder) CreatePersonalPermission(ctx, ps any) *ServiceCreatePersonalPermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePersonalPermission", reflect.TypeOf((*MockService)(nil).CreatePersonalPermission), ctx, ps)
	return &ServiceCreatePersonalPermissionCall{Call: call}
}

// ServiceCreatePersonalPermissionCall wrap *gomock.Call
type ServiceCreatePersonalPermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceCreatePersonalPermissionCall) Return(arg0 error) *ServiceCreatePersonalPermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceCreatePersonalPermissionCall) Do(f func(context.Context, []domain.Permission) error) *ServiceCreatePersonalPermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceCreatePersonalPermissionCall) DoAndReturn(f func(context.Context, []domain.Permission) error) *ServiceCreatePersonalPermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindPersonalPermissions mocks base method.
func (m *MockService) FindPersonalPermissions(ctx context.Context, uid int64) (map[string][]domain.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPersonalPermissions", ctx, uid)
	ret0, _ := ret[0].(map[string][]domain.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPersonalPermissions indicates an expected call of FindPersonalPermissions.
func (mr *MockServiceMockRecorder) FindPersonalPermissions(ctx, uid any) *ServiceFindPersonalPermissionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPersonalPermissions", reflect.TypeOf((*MockService)(nil).FindPersonalPermissions), ctx, uid)
	return &ServiceFindPersonalPermissionsCall{Call: call}
}

// ServiceFindPersonalPermissionsCall wrap *gomock.Call
type ServiceFindPersonalPermissionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceFindPersonalPermissionsCall) Return(arg0 map[string][]domain.Permission, arg1 error) *ServiceFindPersonalPermissionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceFindPersonalPermissionsCall) Do(f func(context.Context, int64) (map[string][]domain.Permission, error)) *ServiceFindPersonalPermissionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceFindPersonalPermissionsCall) DoAndReturn(f func(context.Context, int64) (map[string][]domain.Permission, error)) *ServiceFindPersonalPermissionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasPermission mocks base method.
func (m *MockService) HasPermission(ctx context.Context, p domain.Permission) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPermission", ctx, p)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPermission indicates an expected call of HasPermission.
func (mr *MockServiceMockRecorder) HasPermission(ctx, p any) *ServiceHasPermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermission", reflect.TypeOf((*MockService)(nil).HasPermission), ctx, p)
	return &ServiceHasPermissionCall{Call: call}
}

// ServiceHasPermissionCall wrap *gomock.Call
type ServiceHasPermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceHasPermissionCall) Return(arg0 bool, arg1 error) *ServiceHasPermissionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceHasPermissionCall) Do(f func(context.Context, domain.Permission) (bool, error)) *ServiceHasPermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceHasPermissionCall) DoAndReturn(f func(context.Context, domain.Permission) (bool, error)) *ServiceHasPermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
