// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package permission

import (
	"sync"

	"github.com/ecodeclub/mq-api"
	"github.com/ecodeclub/webook/internal/permission/internal/domain"
	"github.com/ecodeclub/webook/internal/permission/internal/event"
	"github.com/ecodeclub/webook/internal/permission/internal/repository"
	"github.com/ecodeclub/webook/internal/permission/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/permission/internal/service"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *gorm.DB, q mq.MQ) (*Module, error) {
	daoPermissionDAO := initDAO(db)
	permissionRepository := repository.NewPermissionRepository(daoPermissionDAO)
	serviceService := service.NewPermissionService(permissionRepository)
	permissionEventConsumer, err := event.NewPermissionEventConsumer(serviceService, q)
	if err != nil {
		return nil, err
	}
	module := &Module{
		Svc: serviceService,
		c:   permissionEventConsumer,
	}
	return module, nil
}

// wire.go:

type (
	Service            = service.Service
	PersonalPermission = domain.PersonalPermission
)

var (
	once          = &sync.Once{}
	permissionDAO dao.PermissionDAO
)

func initDAO(db *gorm.DB) dao.PermissionDAO {
	once.Do(func() {
		_ = dao.InitTables(db)
		permissionDAO = dao.NewPermissionGORMDAO(db)
	})
	return permissionDAO
}
