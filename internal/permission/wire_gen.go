// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package permission

import (
	"context"
	"sync"

	"github.com/ecodeclub/mq-api"
	"github.com/ecodeclub/webook/internal/permission/internal/domain"
	"github.com/ecodeclub/webook/internal/permission/internal/event"
	"github.com/ecodeclub/webook/internal/permission/internal/repository"
	"github.com/ecodeclub/webook/internal/permission/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/permission/internal/service"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *gorm.DB, q mq.MQ) (*Module, error) {
	daoPermissionDAO := initDAO(db)
	permissionRepository := repository.NewPermissionRepository(daoPermissionDAO)
	serviceService := service.NewPermissionService(permissionRepository)
	permissionEventConsumer := initConsumer(serviceService, q)
	module := &Module{
		Svc: serviceService,
		c:   permissionEventConsumer,
	}
	return module, nil
}

// wire.go:

type (
	Service    = service.Service
	Permission = domain.Permission
)

func initConsumer(svc service.Service, mq2 mq.MQ) *event.PermissionEventConsumer {
	res, err := event.NewPermissionEventConsumer(svc, mq2)
	if err != nil {
		panic(err)
	}
	res.Start(context.Background())
	return res
}

var (
	once          = &sync.Once{}
	permissionDAO dao.PermissionDAO
)

func initDAO(db *gorm.DB) dao.PermissionDAO {
	once.Do(func() {
		_ = dao.InitTables(db)
		permissionDAO = dao.NewPermissionGORMDAO(db)
	})
	return permissionDAO
}
