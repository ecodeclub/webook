// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package review

import (
	"github.com/ecodeclub/ecache"
	"github.com/ecodeclub/ginx/session"
	"github.com/ecodeclub/mq-api"
	"github.com/ecodeclub/webook/internal/interactive"
	"github.com/ecodeclub/webook/internal/review/internal/event"
	"github.com/ecodeclub/webook/internal/review/internal/repository"
	"github.com/ecodeclub/webook/internal/review/internal/repository/cache"
	"github.com/ecodeclub/webook/internal/review/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/review/internal/service"
	"github.com/ecodeclub/webook/internal/review/internal/web"
	"github.com/ego-component/egorm"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *gorm.DB, interSvc *interactive.Module, q mq.MQ, sp session.Provider, ec ecache.Cache) *Module {
	reviewDAO := initReviewDao(db)
	reviewCache := cache.NewReviewCache(ec)
	reviewRepo := repository.NewReviewRepo(reviewDAO, reviewCache)
	interactiveEventProducer := initIntrProducer(q)
	reviewSvc := service.NewReviewSvc(reviewRepo, interactiveEventProducer)
	serviceService := interSvc.Svc
	handler := web.NewHandler(reviewSvc, serviceService, sp)
	adminHandler := web.NewAdminHandler(reviewSvc)
	module := &Module{
		Hdl:      handler,
		AdminHdl: adminHandler,
	}
	return module
}

// wire.go:

func initReviewDao(db *egorm.Component) dao.ReviewDAO {
	err := dao.InitTables(db)
	if err != nil {
		panic(err)
	}
	return dao.NewReviewDAO(db)
}

func initIntrProducer(q mq.MQ) event.InteractiveEventProducer {
	producer, err := event.NewInteractiveEventProducer(q)
	if err != nil {
		panic(err)
	}
	return producer
}
