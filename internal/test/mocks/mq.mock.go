// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ecodeclub/mq-api (interfaces: MQ)
//
// Generated by this command:
//
//	mockgen -destination=internal/test/mocks/mq.mock.go -package=mocks -typed=true github.com/ecodeclub/mq-api MQ
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mq "github.com/ecodeclub/mq-api"
	gomock "go.uber.org/mock/gomock"
)

// MockMQ is a mock of MQ interface.
type MockMQ struct {
	ctrl     *gomock.Controller
	recorder *MockMQMockRecorder
}

// MockMQMockRecorder is the mock recorder for MockMQ.
type MockMQMockRecorder struct {
	mock *MockMQ
}

// NewMockMQ creates a new mock instance.
func NewMockMQ(ctrl *gomock.Controller) *MockMQ {
	mock := &MockMQ{ctrl: ctrl}
	mock.recorder = &MockMQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMQ) EXPECT() *MockMQMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMQ) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMQMockRecorder) Close() *MQCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMQ)(nil).Close))
	return &MQCloseCall{Call: call}
}

// MQCloseCall wrap *gomock.Call
type MQCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MQCloseCall) Return(arg0 error) *MQCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MQCloseCall) Do(f func() error) *MQCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MQCloseCall) DoAndReturn(f func() error) *MQCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Consumer mocks base method.
func (m *MockMQ) Consumer(arg0, arg1 string) (mq.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consumer", arg0, arg1)
	ret0, _ := ret[0].(mq.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consumer indicates an expected call of Consumer.
func (mr *MockMQMockRecorder) Consumer(arg0, arg1 any) *MQConsumerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumer", reflect.TypeOf((*MockMQ)(nil).Consumer), arg0, arg1)
	return &MQConsumerCall{Call: call}
}

// MQConsumerCall wrap *gomock.Call
type MQConsumerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MQConsumerCall) Return(arg0 mq.Consumer, arg1 error) *MQConsumerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MQConsumerCall) Do(f func(string, string) (mq.Consumer, error)) *MQConsumerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MQConsumerCall) DoAndReturn(f func(string, string) (mq.Consumer, error)) *MQConsumerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateTopic mocks base method.
func (m *MockMQ) CreateTopic(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockMQMockRecorder) CreateTopic(arg0, arg1, arg2 any) *MQCreateTopicCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockMQ)(nil).CreateTopic), arg0, arg1, arg2)
	return &MQCreateTopicCall{Call: call}
}

// MQCreateTopicCall wrap *gomock.Call
type MQCreateTopicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MQCreateTopicCall) Return(arg0 error) *MQCreateTopicCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MQCreateTopicCall) Do(f func(context.Context, string, int) error) *MQCreateTopicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MQCreateTopicCall) DoAndReturn(f func(context.Context, string, int) error) *MQCreateTopicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteTopics mocks base method.
func (m *MockMQ) DeleteTopics(arg0 context.Context, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTopics", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopics indicates an expected call of DeleteTopics.
func (mr *MockMQMockRecorder) DeleteTopics(arg0 any, arg1 ...any) *MQDeleteTopicsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopics", reflect.TypeOf((*MockMQ)(nil).DeleteTopics), varargs...)
	return &MQDeleteTopicsCall{Call: call}
}

// MQDeleteTopicsCall wrap *gomock.Call
type MQDeleteTopicsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MQDeleteTopicsCall) Return(arg0 error) *MQDeleteTopicsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MQDeleteTopicsCall) Do(f func(context.Context, ...string) error) *MQDeleteTopicsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MQDeleteTopicsCall) DoAndReturn(f func(context.Context, ...string) error) *MQDeleteTopicsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Producer mocks base method.
func (m *MockMQ) Producer(arg0 string) (mq.Producer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Producer", arg0)
	ret0, _ := ret[0].(mq.Producer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Producer indicates an expected call of Producer.
func (mr *MockMQMockRecorder) Producer(arg0 any) *MQProducerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Producer", reflect.TypeOf((*MockMQ)(nil).Producer), arg0)
	return &MQProducerCall{Call: call}
}

// MQProducerCall wrap *gomock.Call
type MQProducerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MQProducerCall) Return(arg0 mq.Producer, arg1 error) *MQProducerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MQProducerCall) Do(f func(string) (mq.Producer, error)) *MQProducerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MQProducerCall) DoAndReturn(f func(string) (mq.Producer, error)) *MQProducerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
