// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ecodeclub/ginx/session (interfaces: Provider)
//
// Generated by this command:
//
//	mockgen -destination=internal/test/mocks/session_provider.mock.go -package=mocks github.com/ecodeclub/ginx/session Provider
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gctx "github.com/ecodeclub/ginx/gctx"
	session "github.com/ecodeclub/ginx/session"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockProvider) Destroy(arg0 *gctx.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockProviderMockRecorder) Destroy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockProvider)(nil).Destroy), arg0)
}

// Get mocks base method.
func (m *MockProvider) Get(arg0 *gctx.Context) (session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProviderMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProvider)(nil).Get), arg0)
}

// NewSession mocks base method.
func (m *MockProvider) NewSession(arg0 *gctx.Context, arg1 int64, arg2 map[string]string, arg3 map[string]any) (session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSession indicates an expected call of NewSession.
func (mr *MockProviderMockRecorder) NewSession(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockProvider)(nil).NewSession), arg0, arg1, arg2, arg3)
}

// RenewAccessToken mocks base method.
func (m *MockProvider) RenewAccessToken(arg0 *gctx.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewAccessToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenewAccessToken indicates an expected call of RenewAccessToken.
func (mr *MockProviderMockRecorder) RenewAccessToken(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewAccessToken", reflect.TypeOf((*MockProvider)(nil).RenewAccessToken), arg0)
}

// UpdateClaims mocks base method.
func (m *MockProvider) UpdateClaims(arg0 *gctx.Context, arg1 session.Claims) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClaims", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClaims indicates an expected call of UpdateClaims.
func (mr *MockProviderMockRecorder) UpdateClaims(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClaims", reflect.TypeOf((*MockProvider)(nil).UpdateClaims), arg0, arg1)
}
