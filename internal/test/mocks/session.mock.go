// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ecodeclub/ginx/session (interfaces: Session)
//
// Generated by this command:
//
//	mockgen -destination=internal/test/mocks/session.mock.go -package=mocks -typed=true github.com/ecodeclub/ginx/session Session
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ekit "github.com/ecodeclub/ekit"
	session "github.com/ecodeclub/ginx/session"
	gomock "go.uber.org/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Claims mocks base method.
func (m *MockSession) Claims() session.Claims {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Claims")
	ret0, _ := ret[0].(session.Claims)
	return ret0
}

// Claims indicates an expected call of Claims.
func (mr *MockSessionMockRecorder) Claims() *SessionClaimsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claims", reflect.TypeOf((*MockSession)(nil).Claims))
	return &SessionClaimsCall{Call: call}
}

// SessionClaimsCall wrap *gomock.Call
type SessionClaimsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionClaimsCall) Return(arg0 session.Claims) *SessionClaimsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionClaimsCall) Do(f func() session.Claims) *SessionClaimsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionClaimsCall) DoAndReturn(f func() session.Claims) *SessionClaimsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Del mocks base method.
func (m *MockSession) Del(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockSessionMockRecorder) Del(arg0, arg1 any) *SessionDelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockSession)(nil).Del), arg0, arg1)
	return &SessionDelCall{Call: call}
}

// SessionDelCall wrap *gomock.Call
type SessionDelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionDelCall) Return(arg0 error) *SessionDelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionDelCall) Do(f func(context.Context, string) error) *SessionDelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionDelCall) DoAndReturn(f func(context.Context, string) error) *SessionDelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Destroy mocks base method.
func (m *MockSession) Destroy(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockSessionMockRecorder) Destroy(arg0 any) *SessionDestroyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSession)(nil).Destroy), arg0)
	return &SessionDestroyCall{Call: call}
}

// SessionDestroyCall wrap *gomock.Call
type SessionDestroyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionDestroyCall) Return(arg0 error) *SessionDestroyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionDestroyCall) Do(f func(context.Context) error) *SessionDestroyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionDestroyCall) DoAndReturn(f func(context.Context) error) *SessionDestroyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockSession) Get(arg0 context.Context, arg1 string) ekit.AnyValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(ekit.AnyValue)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockSessionMockRecorder) Get(arg0, arg1 any) *SessionGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSession)(nil).Get), arg0, arg1)
	return &SessionGetCall{Call: call}
}

// SessionGetCall wrap *gomock.Call
type SessionGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionGetCall) Return(arg0 ekit.AnyValue) *SessionGetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionGetCall) Do(f func(context.Context, string) ekit.AnyValue) *SessionGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionGetCall) DoAndReturn(f func(context.Context, string) ekit.AnyValue) *SessionGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *MockSession) Set(arg0 context.Context, arg1 string, arg2 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockSessionMockRecorder) Set(arg0, arg1, arg2 any) *SessionSetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSession)(nil).Set), arg0, arg1, arg2)
	return &SessionSetCall{Call: call}
}

// SessionSetCall wrap *gomock.Call
type SessionSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SessionSetCall) Return(arg0 error) *SessionSetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SessionSetCall) Do(f func(context.Context, string, any) error) *SessionSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SessionSetCall) DoAndReturn(f func(context.Context, string, any) error) *SessionSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
