// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ecodeclub/mq-api (interfaces: Producer)
//
// Generated by this command:
//
//	mockgen -destination=internal/test/mocks/producer.mock.go -package=mocks -typed=true github.com/ecodeclub/mq-api Producer
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mq "github.com/ecodeclub/mq-api"
	gomock "go.uber.org/mock/gomock"
)

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProducerMockRecorder) Close() *ProducerCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducer)(nil).Close))
	return &ProducerCloseCall{Call: call}
}

// ProducerCloseCall wrap *gomock.Call
type ProducerCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProducerCloseCall) Return(arg0 error) *ProducerCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProducerCloseCall) Do(f func() error) *ProducerCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProducerCloseCall) DoAndReturn(f func() error) *ProducerCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Produce mocks base method.
func (m *MockProducer) Produce(arg0 context.Context, arg1 *mq.Message) (*mq.ProducerResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", arg0, arg1)
	ret0, _ := ret[0].(*mq.ProducerResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Produce indicates an expected call of Produce.
func (mr *MockProducerMockRecorder) Produce(arg0, arg1 any) *ProducerProduceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockProducer)(nil).Produce), arg0, arg1)
	return &ProducerProduceCall{Call: call}
}

// ProducerProduceCall wrap *gomock.Call
type ProducerProduceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProducerProduceCall) Return(arg0 *mq.ProducerResult, arg1 error) *ProducerProduceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProducerProduceCall) Do(f func(context.Context, *mq.Message) (*mq.ProducerResult, error)) *ProducerProduceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProducerProduceCall) DoAndReturn(f func(context.Context, *mq.Message) (*mq.ProducerResult, error)) *ProducerProduceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProduceWithPartition mocks base method.
func (m *MockProducer) ProduceWithPartition(arg0 context.Context, arg1 *mq.Message, arg2 int) (*mq.ProducerResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceWithPartition", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mq.ProducerResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProduceWithPartition indicates an expected call of ProduceWithPartition.
func (mr *MockProducerMockRecorder) ProduceWithPartition(arg0, arg1, arg2 any) *ProducerProduceWithPartitionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceWithPartition", reflect.TypeOf((*MockProducer)(nil).ProduceWithPartition), arg0, arg1, arg2)
	return &ProducerProduceWithPartitionCall{Call: call}
}

// ProducerProduceWithPartitionCall wrap *gomock.Call
type ProducerProduceWithPartitionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProducerProduceWithPartitionCall) Return(arg0 *mq.ProducerResult, arg1 error) *ProducerProduceWithPartitionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProducerProduceWithPartitionCall) Do(f func(context.Context, *mq.Message, int) (*mq.ProducerResult, error)) *ProducerProduceWithPartitionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProducerProduceWithPartitionCall) DoAndReturn(f func(context.Context, *mq.Message, int) (*mq.ProducerResult, error)) *ProducerProduceWithPartitionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
