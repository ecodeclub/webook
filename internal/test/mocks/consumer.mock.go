// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ecodeclub/mq-api (interfaces: Consumer)
//
// Generated by this command:
//
//	mockgen -destination=internal/test/mocks/consumer.mock.go -package=mocks -typed=true github.com/ecodeclub/mq-api Consumer
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mq "github.com/ecodeclub/mq-api"
	gomock "go.uber.org/mock/gomock"
)

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConsumerMockRecorder) Close() *ConsumerCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConsumer)(nil).Close))
	return &ConsumerCloseCall{Call: call}
}

// ConsumerCloseCall wrap *gomock.Call
type ConsumerCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConsumerCloseCall) Return(arg0 error) *ConsumerCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConsumerCloseCall) Do(f func() error) *ConsumerCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConsumerCloseCall) DoAndReturn(f func() error) *ConsumerCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Consume mocks base method.
func (m *MockConsumer) Consume(arg0 context.Context) (*mq.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", arg0)
	ret0, _ := ret[0].(*mq.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockConsumerMockRecorder) Consume(arg0 any) *ConsumerConsumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConsumer)(nil).Consume), arg0)
	return &ConsumerConsumeCall{Call: call}
}

// ConsumerConsumeCall wrap *gomock.Call
type ConsumerConsumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConsumerConsumeCall) Return(arg0 *mq.Message, arg1 error) *ConsumerConsumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConsumerConsumeCall) Do(f func(context.Context) (*mq.Message, error)) *ConsumerConsumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConsumerConsumeCall) DoAndReturn(f func(context.Context) (*mq.Message, error)) *ConsumerConsumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConsumeChan mocks base method.
func (m *MockConsumer) ConsumeChan(arg0 context.Context) (<-chan *mq.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeChan", arg0)
	ret0, _ := ret[0].(<-chan *mq.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumeChan indicates an expected call of ConsumeChan.
func (mr *MockConsumerMockRecorder) ConsumeChan(arg0 any) *ConsumerConsumeChanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeChan", reflect.TypeOf((*MockConsumer)(nil).ConsumeChan), arg0)
	return &ConsumerConsumeChanCall{Call: call}
}

// ConsumerConsumeChanCall wrap *gomock.Call
type ConsumerConsumeChanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConsumerConsumeChanCall) Return(arg0 <-chan *mq.Message, arg1 error) *ConsumerConsumeChanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConsumerConsumeChanCall) Do(f func(context.Context) (<-chan *mq.Message, error)) *ConsumerConsumeChanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConsumerConsumeChanCall) DoAndReturn(f func(context.Context) (<-chan *mq.Message, error)) *ConsumerConsumeChanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
