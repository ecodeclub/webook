// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package roadmap

import (
	"sync"

	baguwen "github.com/ecodeclub/webook/internal/question"
	"github.com/ecodeclub/webook/internal/roadmap/internal/repository"
	"github.com/ecodeclub/webook/internal/roadmap/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/roadmap/internal/service"
	"github.com/ecodeclub/webook/internal/roadmap/internal/web"
	"github.com/ego-component/egorm"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *gorm.DB, queModule *baguwen.Module) *Module {
	daoAdminDAO := initAdminDAO(db)
	adminRepository := repository.NewCachedAdminRepository(daoAdminDAO)
	adminService := service.NewAdminService(adminRepository)
	serviceService := queModule.Svc
	questionSetService := queModule.SetSvc
	bizService := service.NewConcurrentBizService(serviceService, questionSetService)
	adminHandler := web.NewAdminHandler(adminService, bizService)
	roadmapDAO := dao.NewGORMRoadmapDAO(db)
	repositoryRepository := repository.NewCachedRepository(roadmapDAO)
	service2 := service.NewService(repositoryRepository)
	handler := web.NewHandler(service2, bizService)
	module := &Module{
		AdminHdl: adminHandler,
		Hdl:      handler,
	}
	return module
}

// wire.go:

var (
	adminDAO    dao.AdminDAO
	daoInitOnce sync.Once
)

func initAdminDAO(db *egorm.Component) dao.AdminDAO {
	daoInitOnce.Do(func() {
		err := dao.InitTables(db)
		if err != nil {
			panic(err)
		}
		adminDAO = dao.NewGORMAdminDAO(db)
	})
	return adminDAO
}
