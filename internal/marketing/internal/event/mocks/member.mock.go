// Code generated by MockGen. DO NOT EDIT.
// Source: ./member_event_producer.go
//
// Generated by this command:
//
//	mockgen -source=./member_event_producer.go -package=evtmocks -destination=../mocks/member.mock.go -typed MemberEventProducer
//
// Package evtmocks is a generated GoMock package.
package evtmocks

import (
	context "context"
	reflect "reflect"

	event "github.com/ecodeclub/webook/internal/marketing/internal/event"
	gomock "go.uber.org/mock/gomock"
)

// MockMemberEventProducer is a mock of MemberEventProducer interface.
type MockMemberEventProducer struct {
	ctrl     *gomock.Controller
	recorder *MockMemberEventProducerMockRecorder
}

// MockMemberEventProducerMockRecorder is the mock recorder for MockMemberEventProducer.
type MockMemberEventProducerMockRecorder struct {
	mock *MockMemberEventProducer
}

// NewMockMemberEventProducer creates a new mock instance.
func NewMockMemberEventProducer(ctrl *gomock.Controller) *MockMemberEventProducer {
	mock := &MockMemberEventProducer{ctrl: ctrl}
	mock.recorder = &MockMemberEventProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberEventProducer) EXPECT() *MockMemberEventProducerMockRecorder {
	return m.recorder
}

// Produce mocks base method.
func (m *MockMemberEventProducer) Produce(ctx context.Context, evt event.MemberEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, evt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockMemberEventProducerMockRecorder) Produce(ctx, evt any) *MemberEventProducerProduceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockMemberEventProducer)(nil).Produce), ctx, evt)
	return &MemberEventProducerProduceCall{Call: call}
}

// MemberEventProducerProduceCall wrap *gomock.Call
type MemberEventProducerProduceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MemberEventProducerProduceCall) Return(arg0 error) *MemberEventProducerProduceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MemberEventProducerProduceCall) Do(f func(context.Context, event.MemberEvent) error) *MemberEventProducerProduceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MemberEventProducerProduceCall) DoAndReturn(f func(context.Context, event.MemberEvent) error) *MemberEventProducerProduceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
