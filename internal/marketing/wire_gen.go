// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package marketing

import (
	"context"

	"github.com/ecodeclub/mq-api"
	"github.com/ecodeclub/webook/internal/marketing/internal/event/consumer"
	"github.com/ecodeclub/webook/internal/marketing/internal/event/producer"
	"github.com/ecodeclub/webook/internal/marketing/internal/repository"
	"github.com/ecodeclub/webook/internal/marketing/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/marketing/internal/service"
	"github.com/ecodeclub/webook/internal/marketing/internal/web"
	"github.com/ecodeclub/webook/internal/order"
	"github.com/ecodeclub/webook/internal/pkg/sequencenumber"
	"github.com/ecodeclub/webook/internal/product"
	"github.com/lithammer/shortuuid/v4"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *gorm.DB, q mq.MQ, om *order.Module, pm *product.Module) (*Module, error) {
	marketingDAO := dao.NewGORMMarketingDAO(db)
	marketingRepository := repository.NewRepository(marketingDAO)
	redemptionCodeAdminService := service.NewAdminService(marketingRepository)
	serviceService := pm.Svc
	generator := sequencenumber.NewGenerator()
	v := redemptionCodeGenerator(generator)
	adminHandler := web.NewAdminHandler(redemptionCodeAdminService, serviceService, v)
	service2 := om.Svc
	v2 := eventKeyGenerator()
	memberEventProducer, err := producer.NewMemberEventProducer(q)
	if err != nil {
		return nil, err
	}
	creditEventProducer, err := producer.NewCreditEventProducer(q)
	if err != nil {
		return nil, err
	}
	permissionEventProducer, err := producer.NewPermissionEventProducer(q)
	if err != nil {
		return nil, err
	}
	service3 := service.NewService(marketingRepository, service2, serviceService, v, v2, memberEventProducer, creditEventProducer, permissionEventProducer)
	handler := web.NewHandler(service3)
	orderEventConsumer, err := newOrderEventConsumer(service3, q)
	if err != nil {
		return nil, err
	}
	module := &Module{
		AdminHdl:      adminHandler,
		Hdl:           handler,
		orderConsumer: orderEventConsumer,
	}
	return module, nil
}

// wire.go:

type (
	Service      = service.Service
	Handler      = web.Handler
	AdminHandler = web.AdminHandler
)

func newOrderEventConsumer(svc service.Service, q mq.MQ) (*consumer.OrderEventConsumer, error) {
	res, err := consumer.NewOrderEventConsumer(svc, q)
	if err == nil {
		res.Start(context.Background())
	}
	return res, err
}

func redemptionCodeGenerator(generator *sequencenumber.Generator) func(id int64) string {
	return func(id int64) string {
		code, _ := generator.Generate(id)
		return code
	}
}

func eventKeyGenerator() func() string {
	return shortuuid.New
}
