// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package payment

import (
	"sync"
	"time"

	"github.com/ecodeclub/ecache"
	"github.com/ecodeclub/mq-api"
	"github.com/ecodeclub/webook/internal/credit"
	"github.com/ecodeclub/webook/internal/payment/internal/domain"
	"github.com/ecodeclub/webook/internal/payment/internal/event"
	"github.com/ecodeclub/webook/internal/payment/internal/repository"
	"github.com/ecodeclub/webook/internal/payment/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/payment/internal/service"
	credit2 "github.com/ecodeclub/webook/internal/payment/internal/service/credit"
	"github.com/ecodeclub/webook/internal/payment/internal/web"
	"github.com/ecodeclub/webook/internal/payment/ioc"
	"github.com/ecodeclub/webook/internal/pkg/sequencenumber"
	"github.com/gotomicro/ego/core/elog"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *gorm.DB, mq2 mq.MQ, c ecache.Cache, cm *credit.Module) (*Module, error) {
	wechatConfig := ioc.InitWechatConfig()
	handler := ioc.InitWechatNotifyHandler(wechatConfig)
	client := ioc.InitWechatClient(wechatConfig)
	paymentDAO := initDAO(db)
	paymentRepository := repository.NewPaymentRepository(paymentDAO)
	paymentEventProducer, err := initPaymentEventProducer(mq2)
	if err != nil {
		return nil, err
	}
	v := paymentDDLFunc()
	component := initLogger()
	nativePaymentService := ioc.InitWechatNativeService(client, paymentRepository, paymentEventProducer, v, component, wechatConfig)
	webHandler := web.NewHandler(handler, nativePaymentService)
	serviceService := cm.Svc
	generator := sequencenumber.NewGenerator()
	paymentService := credit2.NewCreditPaymentService(serviceService, paymentRepository, paymentEventProducer, v, generator, component)
	service2 := service.NewService(nativePaymentService, paymentService, generator, paymentRepository)
	module := &Module{
		Hdl: webHandler,
		Svc: service2,
	}
	return module, nil
}

// wire.go:

type Handler = web.Handler

type Payment = domain.Payment

type Record = domain.PaymentRecord

type Channel = domain.PaymentChannel

var ChannelTypeCredit int64 = domain.ChannelTypeCredit

var ChannelTypeWechat int64 = domain.ChannelTypeWechat

type Service = service.Service

var (
	once     = &sync.Once{}
	orderDAO dao.PaymentDAO
)

func initPaymentEventProducer(mq2 mq.MQ) (event.PaymentEventProducer, error) {
	p, err := mq2.Producer("payment_events")
	if err != nil {
		return nil, err
	}
	return event.NewPaymentEventProducer(p)
}

func paymentDDLFunc() func() int64 {
	return func() int64 {
		return time.Now().Add(time.Minute * 30).UnixMilli()
	}
}

func initDAO(db *gorm.DB) dao.PaymentDAO {
	once.Do(func() {
		_ = dao.InitTables(db)
		orderDAO = dao.NewPaymentGORMDAO(db)
	})
	return orderDAO
}

func initLogger() *elog.Component {
	return elog.DefaultLogger
}
