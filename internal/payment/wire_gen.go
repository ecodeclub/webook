// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package payment

import (
	"sync"

	"github.com/ecodeclub/ecache"
	"github.com/ecodeclub/mq-api"
	"github.com/ecodeclub/webook/internal/credit"
	"github.com/ecodeclub/webook/internal/payment/internal/domain"
	"github.com/ecodeclub/webook/internal/payment/internal/event"
	"github.com/ecodeclub/webook/internal/payment/internal/job"
	"github.com/ecodeclub/webook/internal/payment/internal/repository"
	"github.com/ecodeclub/webook/internal/payment/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/payment/internal/service"
	"github.com/ecodeclub/webook/internal/payment/internal/service/wechat"
	"github.com/ecodeclub/webook/internal/payment/internal/web"
	"github.com/ecodeclub/webook/internal/payment/ioc"
	"github.com/ecodeclub/webook/internal/pkg/sequencenumber"
	"github.com/wechatpay-apiv3/wechatpay-go/core/notify"
	"github.com/wechatpay-apiv3/wechatpay-go/services/payments/native"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *gorm.DB, mq2 mq.MQ, c ecache.Cache, cm *credit.Module) (*Module, error) {
	wechatConfig := ioc.InitWechatConfig()
	handler := ioc.InitWechatNotifyHandler(wechatConfig)
	notifyHandler := convertToNotifyHandler(handler)
	client := ioc.InitWechatClient(wechatConfig)
	nativeApiService := ioc.InitNativeApiService(client)
	nativeAPIService := convertToNativeAPIService(nativeApiService)
	nativePaymentService := ioc.InitWechatNativeService(nativeAPIService, wechatConfig)
	serviceService := cm.Svc
	generator := sequencenumber.NewGenerator()
	daoPaymentDAO := initDAO(db)
	paymentRepository := repository.NewPaymentRepository(daoPaymentDAO)
	paymentEventProducer, err := event.NewPaymentEventProducer(mq2)
	if err != nil {
		return nil, err
	}
	service2 := service.NewService(nativePaymentService, serviceService, generator, paymentRepository, paymentEventProducer)
	webHandler := web.NewHandler(notifyHandler, service2)
	syncWechatOrderJob := initSyncWechatOrderJob(service2)
	module := &Module{
		Hdl:                webHandler,
		Svc:                service2,
		SyncWechatOrderJob: syncWechatOrderJob,
	}
	return module, nil
}

// wire.go:

type (
	Handler            = web.Handler
	Payment            = domain.Payment
	Record             = domain.PaymentRecord
	Channel            = domain.PaymentChannel
	ChannelType        = domain.ChannelType
	Service            = service.Service
	SyncWechatOrderJob = job.SyncWechatOrderJob
)

const (
	ChannelTypeCredit = domain.ChannelTypeCredit
	ChannelTypeWechat = domain.ChannelTypeWechat

	StatusUnpaid      = domain.PaymentStatusUnpaid
	StatusProcessing  = domain.PaymentStatusProcessing
	StatusPaidSuccess = domain.PaymentStatusPaidSuccess
	StatusPaidFailed  = domain.PaymentStatusPaidFailed
)

func convertToNotifyHandler(h *notify.Handler) wechat.NotifyHandler {
	return h
}

func convertToNativeAPIService(n *native.NativeApiService) wechat.NativeAPIService {
	return n
}

var (
	once       = &sync.Once{}
	paymentDAO dao.PaymentDAO
)

func initDAO(db *gorm.DB) dao.PaymentDAO {
	once.Do(func() {
		_ = dao.InitTables(db)
		paymentDAO = dao.NewPaymentGORMDAO(db)
	})
	return paymentDAO
}

func initSyncWechatOrderJob(svc service.Service) *SyncWechatOrderJob {
	minutes := int64(30)
	seconds := int64(10)
	limit := 100
	return job.NewSyncWechatOrderJob(svc, minutes, seconds, limit)
}
