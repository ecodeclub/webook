// Code generated by MockGen. DO NOT EDIT.
// Source: ./native.go
//
// Generated by this command:
//
//	mockgen -source=./native.go -package=wechatmocks -destination=./mocks/native.mock.go -typed NativeAPIService
//
// Package wechatmocks is a generated GoMock package.
package wechatmocks

import (
	context "context"
	reflect "reflect"

	core "github.com/wechatpay-apiv3/wechatpay-go/core"
	payments "github.com/wechatpay-apiv3/wechatpay-go/services/payments"
	native "github.com/wechatpay-apiv3/wechatpay-go/services/payments/native"
	gomock "go.uber.org/mock/gomock"
)

// MockNativeAPIService is a mock of NativeAPIService interface.
type MockNativeAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockNativeAPIServiceMockRecorder
}

// MockNativeAPIServiceMockRecorder is the mock recorder for MockNativeAPIService.
type MockNativeAPIServiceMockRecorder struct {
	mock *MockNativeAPIService
}

// NewMockNativeAPIService creates a new mock instance.
func NewMockNativeAPIService(ctrl *gomock.Controller) *MockNativeAPIService {
	mock := &MockNativeAPIService{ctrl: ctrl}
	mock.recorder = &MockNativeAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNativeAPIService) EXPECT() *MockNativeAPIServiceMockRecorder {
	return m.recorder
}

// Prepay mocks base method.
func (m *MockNativeAPIService) Prepay(ctx context.Context, req native.PrepayRequest) (*native.PrepayResponse, *core.APIResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepay", ctx, req)
	ret0, _ := ret[0].(*native.PrepayResponse)
	ret1, _ := ret[1].(*core.APIResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Prepay indicates an expected call of Prepay.
func (mr *MockNativeAPIServiceMockRecorder) Prepay(ctx, req any) *NativeAPIServicePrepayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepay", reflect.TypeOf((*MockNativeAPIService)(nil).Prepay), ctx, req)
	return &NativeAPIServicePrepayCall{Call: call}
}

// NativeAPIServicePrepayCall wrap *gomock.Call
type NativeAPIServicePrepayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NativeAPIServicePrepayCall) Return(resp *native.PrepayResponse, result *core.APIResult, err error) *NativeAPIServicePrepayCall {
	c.Call = c.Call.Return(resp, result, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NativeAPIServicePrepayCall) Do(f func(context.Context, native.PrepayRequest) (*native.PrepayResponse, *core.APIResult, error)) *NativeAPIServicePrepayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NativeAPIServicePrepayCall) DoAndReturn(f func(context.Context, native.PrepayRequest) (*native.PrepayResponse, *core.APIResult, error)) *NativeAPIServicePrepayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryOrderByOutTradeNo mocks base method.
func (m *MockNativeAPIService) QueryOrderByOutTradeNo(ctx context.Context, req native.QueryOrderByOutTradeNoRequest) (*payments.Transaction, *core.APIResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOrderByOutTradeNo", ctx, req)
	ret0, _ := ret[0].(*payments.Transaction)
	ret1, _ := ret[1].(*core.APIResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryOrderByOutTradeNo indicates an expected call of QueryOrderByOutTradeNo.
func (mr *MockNativeAPIServiceMockRecorder) QueryOrderByOutTradeNo(ctx, req any) *NativeAPIServiceQueryOrderByOutTradeNoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOrderByOutTradeNo", reflect.TypeOf((*MockNativeAPIService)(nil).QueryOrderByOutTradeNo), ctx, req)
	return &NativeAPIServiceQueryOrderByOutTradeNoCall{Call: call}
}

// NativeAPIServiceQueryOrderByOutTradeNoCall wrap *gomock.Call
type NativeAPIServiceQueryOrderByOutTradeNoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NativeAPIServiceQueryOrderByOutTradeNoCall) Return(resp *payments.Transaction, result *core.APIResult, err error) *NativeAPIServiceQueryOrderByOutTradeNoCall {
	c.Call = c.Call.Return(resp, result, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NativeAPIServiceQueryOrderByOutTradeNoCall) Do(f func(context.Context, native.QueryOrderByOutTradeNoRequest) (*payments.Transaction, *core.APIResult, error)) *NativeAPIServiceQueryOrderByOutTradeNoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NativeAPIServiceQueryOrderByOutTradeNoCall) DoAndReturn(f func(context.Context, native.QueryOrderByOutTradeNoRequest) (*payments.Transaction, *core.APIResult, error)) *NativeAPIServiceQueryOrderByOutTradeNoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
