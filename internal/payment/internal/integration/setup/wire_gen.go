// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"sync"

	"github.com/ecodeclub/webook/internal/credit"
	"github.com/ecodeclub/webook/internal/payment/internal/event"
	"github.com/ecodeclub/webook/internal/payment/internal/repository"
	"github.com/ecodeclub/webook/internal/payment/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/payment/internal/service"
	"github.com/ecodeclub/webook/internal/payment/internal/service/wechat"
	"github.com/ecodeclub/webook/internal/payment/ioc"
	"github.com/ecodeclub/webook/internal/pkg/sequencenumber"
	testioc "github.com/ecodeclub/webook/internal/test/ioc"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitService(p event.PaymentEventProducer, cm *credit.Module, native wechat.NativeAPIService) service.Service {
	wechatConfig := initWechatConfig()
	nativePaymentService := ioc.InitWechatNativeService(native, wechatConfig)
	serviceService := cm.Svc
	generator := sequencenumber.NewGenerator()
	db := testioc.InitDB()
	daoPaymentDAO := InitDAO(db)
	paymentRepository := repository.NewPaymentRepository(daoPaymentDAO)
	service2 := service.NewService(nativePaymentService, serviceService, generator, paymentRepository, p)
	return service2
}

// wire.go:

var serviceSet = wire.NewSet(testioc.BaseSet, initWechatConfig, ioc.InitWechatNativeService, InitDAO, repository.NewPaymentRepository, sequencenumber.NewGenerator, service.NewService)

var (
	once       = &sync.Once{}
	paymentDAO dao.PaymentDAO
)

func InitDAO(db *gorm.DB) dao.PaymentDAO {
	once.Do(func() {
		_ = dao.InitTables(db)
		paymentDAO = dao.NewPaymentGORMDAO(db)
	})
	return paymentDAO
}

func initWechatConfig() ioc.WechatConfig {
	return ioc.WechatConfig{
		AppID: "MockAPPID",
		MchID: "MockMchID",
	}
}
