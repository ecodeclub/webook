// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -package=paymentmocks -destination=../../mocks/payment.mock.go -typed Service
//

// Package paymentmocks is a generated GoMock package.
package paymentmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/payment/internal/domain"
	payments "github.com/wechatpay-apiv3/wechatpay-go/services/payments"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CloseTimeoutPayment mocks base method.
func (m *MockService) CloseTimeoutPayment(ctx context.Context, pmt domain.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseTimeoutPayment", ctx, pmt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseTimeoutPayment indicates an expected call of CloseTimeoutPayment.
func (mr *MockServiceMockRecorder) CloseTimeoutPayment(ctx, pmt any) *MockServiceCloseTimeoutPaymentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseTimeoutPayment", reflect.TypeOf((*MockService)(nil).CloseTimeoutPayment), ctx, pmt)
	return &MockServiceCloseTimeoutPaymentCall{Call: call}
}

// MockServiceCloseTimeoutPaymentCall wrap *gomock.Call
type MockServiceCloseTimeoutPaymentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCloseTimeoutPaymentCall) Return(arg0 error) *MockServiceCloseTimeoutPaymentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCloseTimeoutPaymentCall) Do(f func(context.Context, domain.Payment) error) *MockServiceCloseTimeoutPaymentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCloseTimeoutPaymentCall) DoAndReturn(f func(context.Context, domain.Payment) error) *MockServiceCloseTimeoutPaymentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePayment mocks base method.
func (m *MockService) CreatePayment(ctx context.Context, pmt domain.Payment) (domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, pmt)
	ret0, _ := ret[0].(domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockServiceMockRecorder) CreatePayment(ctx, pmt any) *MockServiceCreatePaymentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockService)(nil).CreatePayment), ctx, pmt)
	return &MockServiceCreatePaymentCall{Call: call}
}

// MockServiceCreatePaymentCall wrap *gomock.Call
type MockServiceCreatePaymentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreatePaymentCall) Return(arg0 domain.Payment, arg1 error) *MockServiceCreatePaymentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreatePaymentCall) Do(f func(context.Context, domain.Payment) (domain.Payment, error)) *MockServiceCreatePaymentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreatePaymentCall) DoAndReturn(f func(context.Context, domain.Payment) (domain.Payment, error)) *MockServiceCreatePaymentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindPaymentByID mocks base method.
func (m *MockService) FindPaymentByID(ctx context.Context, pmtID int64) (domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPaymentByID", ctx, pmtID)
	ret0, _ := ret[0].(domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPaymentByID indicates an expected call of FindPaymentByID.
func (mr *MockServiceMockRecorder) FindPaymentByID(ctx, pmtID any) *MockServiceFindPaymentByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPaymentByID", reflect.TypeOf((*MockService)(nil).FindPaymentByID), ctx, pmtID)
	return &MockServiceFindPaymentByIDCall{Call: call}
}

// MockServiceFindPaymentByIDCall wrap *gomock.Call
type MockServiceFindPaymentByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFindPaymentByIDCall) Return(arg0 domain.Payment, arg1 error) *MockServiceFindPaymentByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFindPaymentByIDCall) Do(f func(context.Context, int64) (domain.Payment, error)) *MockServiceFindPaymentByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFindPaymentByIDCall) DoAndReturn(f func(context.Context, int64) (domain.Payment, error)) *MockServiceFindPaymentByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindTimeoutPayments mocks base method.
func (m *MockService) FindTimeoutPayments(ctx context.Context, offset, limit int, ctime int64) ([]domain.Payment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTimeoutPayments", ctx, offset, limit, ctime)
	ret0, _ := ret[0].([]domain.Payment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindTimeoutPayments indicates an expected call of FindTimeoutPayments.
func (mr *MockServiceMockRecorder) FindTimeoutPayments(ctx, offset, limit, ctime any) *MockServiceFindTimeoutPaymentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTimeoutPayments", reflect.TypeOf((*MockService)(nil).FindTimeoutPayments), ctx, offset, limit, ctime)
	return &MockServiceFindTimeoutPaymentsCall{Call: call}
}

// MockServiceFindTimeoutPaymentsCall wrap *gomock.Call
type MockServiceFindTimeoutPaymentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFindTimeoutPaymentsCall) Return(arg0 []domain.Payment, arg1 int64, arg2 error) *MockServiceFindTimeoutPaymentsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFindTimeoutPaymentsCall) Do(f func(context.Context, int, int, int64) ([]domain.Payment, int64, error)) *MockServiceFindTimeoutPaymentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFindTimeoutPaymentsCall) DoAndReturn(f func(context.Context, int, int, int64) ([]domain.Payment, int64, error)) *MockServiceFindTimeoutPaymentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPaymentChannels mocks base method.
func (m *MockService) GetPaymentChannels(ctx context.Context) []domain.PaymentChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentChannels", ctx)
	ret0, _ := ret[0].([]domain.PaymentChannel)
	return ret0
}

// GetPaymentChannels indicates an expected call of GetPaymentChannels.
func (mr *MockServiceMockRecorder) GetPaymentChannels(ctx any) *MockServiceGetPaymentChannelsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentChannels", reflect.TypeOf((*MockService)(nil).GetPaymentChannels), ctx)
	return &MockServiceGetPaymentChannelsCall{Call: call}
}

// MockServiceGetPaymentChannelsCall wrap *gomock.Call
type MockServiceGetPaymentChannelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetPaymentChannelsCall) Return(arg0 []domain.PaymentChannel) *MockServiceGetPaymentChannelsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetPaymentChannelsCall) Do(f func(context.Context) []domain.PaymentChannel) *MockServiceGetPaymentChannelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetPaymentChannelsCall) DoAndReturn(f func(context.Context) []domain.PaymentChannel) *MockServiceGetPaymentChannelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HandleCreditCallback mocks base method.
func (m *MockService) HandleCreditCallback(ctx context.Context, pmt domain.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCreditCallback", ctx, pmt)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleCreditCallback indicates an expected call of HandleCreditCallback.
func (mr *MockServiceMockRecorder) HandleCreditCallback(ctx, pmt any) *MockServiceHandleCreditCallbackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreditCallback", reflect.TypeOf((*MockService)(nil).HandleCreditCallback), ctx, pmt)
	return &MockServiceHandleCreditCallbackCall{Call: call}
}

// MockServiceHandleCreditCallbackCall wrap *gomock.Call
type MockServiceHandleCreditCallbackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceHandleCreditCallbackCall) Return(arg0 error) *MockServiceHandleCreditCallbackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceHandleCreditCallbackCall) Do(f func(context.Context, domain.Payment) error) *MockServiceHandleCreditCallbackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceHandleCreditCallbackCall) DoAndReturn(f func(context.Context, domain.Payment) error) *MockServiceHandleCreditCallbackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HandleWechatCallback mocks base method.
func (m *MockService) HandleWechatCallback(ctx context.Context, txn *payments.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleWechatCallback", ctx, txn)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleWechatCallback indicates an expected call of HandleWechatCallback.
func (mr *MockServiceMockRecorder) HandleWechatCallback(ctx, txn any) *MockServiceHandleWechatCallbackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleWechatCallback", reflect.TypeOf((*MockService)(nil).HandleWechatCallback), ctx, txn)
	return &MockServiceHandleWechatCallbackCall{Call: call}
}

// MockServiceHandleWechatCallbackCall wrap *gomock.Call
type MockServiceHandleWechatCallbackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceHandleWechatCallbackCall) Return(arg0 error) *MockServiceHandleWechatCallbackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceHandleWechatCallbackCall) Do(f func(context.Context, *payments.Transaction) error) *MockServiceHandleWechatCallbackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceHandleWechatCallbackCall) DoAndReturn(f func(context.Context, *payments.Transaction) error) *MockServiceHandleWechatCallbackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PayByID mocks base method.
func (m *MockService) PayByID(ctx context.Context, pmtID int64) (domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayByID", ctx, pmtID)
	ret0, _ := ret[0].(domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayByID indicates an expected call of PayByID.
func (mr *MockServiceMockRecorder) PayByID(ctx, pmtID any) *MockServicePayByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayByID", reflect.TypeOf((*MockService)(nil).PayByID), ctx, pmtID)
	return &MockServicePayByIDCall{Call: call}
}

// MockServicePayByIDCall wrap *gomock.Call
type MockServicePayByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServicePayByIDCall) Return(arg0 domain.Payment, arg1 error) *MockServicePayByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServicePayByIDCall) Do(f func(context.Context, int64) (domain.Payment, error)) *MockServicePayByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServicePayByIDCall) DoAndReturn(f func(context.Context, int64) (domain.Payment, error)) *MockServicePayByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetPaymentStatusPaidFailed mocks base method.
func (m *MockService) SetPaymentStatusPaidFailed(ctx context.Context, pmt *domain.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPaymentStatusPaidFailed", ctx, pmt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPaymentStatusPaidFailed indicates an expected call of SetPaymentStatusPaidFailed.
func (mr *MockServiceMockRecorder) SetPaymentStatusPaidFailed(ctx, pmt any) *MockServiceSetPaymentStatusPaidFailedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPaymentStatusPaidFailed", reflect.TypeOf((*MockService)(nil).SetPaymentStatusPaidFailed), ctx, pmt)
	return &MockServiceSetPaymentStatusPaidFailedCall{Call: call}
}

// MockServiceSetPaymentStatusPaidFailedCall wrap *gomock.Call
type MockServiceSetPaymentStatusPaidFailedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSetPaymentStatusPaidFailedCall) Return(arg0 error) *MockServiceSetPaymentStatusPaidFailedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSetPaymentStatusPaidFailedCall) Do(f func(context.Context, *domain.Payment) error) *MockServiceSetPaymentStatusPaidFailedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSetPaymentStatusPaidFailedCall) DoAndReturn(f func(context.Context, *domain.Payment) error) *MockServiceSetPaymentStatusPaidFailedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SyncWechatInfo mocks base method.
func (m *MockService) SyncWechatInfo(ctx context.Context, pmt domain.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncWechatInfo", ctx, pmt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncWechatInfo indicates an expected call of SyncWechatInfo.
func (mr *MockServiceMockRecorder) SyncWechatInfo(ctx, pmt any) *MockServiceSyncWechatInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncWechatInfo", reflect.TypeOf((*MockService)(nil).SyncWechatInfo), ctx, pmt)
	return &MockServiceSyncWechatInfoCall{Call: call}
}

// MockServiceSyncWechatInfoCall wrap *gomock.Call
type MockServiceSyncWechatInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSyncWechatInfoCall) Return(arg0 error) *MockServiceSyncWechatInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSyncWechatInfoCall) Do(f func(context.Context, domain.Payment) error) *MockServiceSyncWechatInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSyncWechatInfoCall) DoAndReturn(f func(context.Context, domain.Payment) error) *MockServiceSyncWechatInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPaymentService is a mock of PaymentService interface.
type MockPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceMockRecorder
	isgomock struct{}
}

// MockPaymentServiceMockRecorder is the mock recorder for MockPaymentService.
type MockPaymentServiceMockRecorder struct {
	mock *MockPaymentService
}

// NewMockPaymentService creates a new mock instance.
func NewMockPaymentService(ctrl *gomock.Controller) *MockPaymentService {
	mock := &MockPaymentService{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentService) EXPECT() *MockPaymentServiceMockRecorder {
	return m.recorder
}

// ConvertCallbackTransactionToDomain mocks base method.
func (m *MockPaymentService) ConvertCallbackTransactionToDomain(txn *payments.Transaction) (domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertCallbackTransactionToDomain", txn)
	ret0, _ := ret[0].(domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertCallbackTransactionToDomain indicates an expected call of ConvertCallbackTransactionToDomain.
func (mr *MockPaymentServiceMockRecorder) ConvertCallbackTransactionToDomain(txn any) *MockPaymentServiceConvertCallbackTransactionToDomainCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertCallbackTransactionToDomain", reflect.TypeOf((*MockPaymentService)(nil).ConvertCallbackTransactionToDomain), txn)
	return &MockPaymentServiceConvertCallbackTransactionToDomainCall{Call: call}
}

// MockPaymentServiceConvertCallbackTransactionToDomainCall wrap *gomock.Call
type MockPaymentServiceConvertCallbackTransactionToDomainCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPaymentServiceConvertCallbackTransactionToDomainCall) Return(arg0 domain.Payment, arg1 error) *MockPaymentServiceConvertCallbackTransactionToDomainCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPaymentServiceConvertCallbackTransactionToDomainCall) Do(f func(*payments.Transaction) (domain.Payment, error)) *MockPaymentServiceConvertCallbackTransactionToDomainCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPaymentServiceConvertCallbackTransactionToDomainCall) DoAndReturn(f func(*payments.Transaction) (domain.Payment, error)) *MockPaymentServiceConvertCallbackTransactionToDomainCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockPaymentService) Name() domain.ChannelType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(domain.ChannelType)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPaymentServiceMockRecorder) Name() *MockPaymentServiceNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPaymentService)(nil).Name))
	return &MockPaymentServiceNameCall{Call: call}
}

// MockPaymentServiceNameCall wrap *gomock.Call
type MockPaymentServiceNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPaymentServiceNameCall) Return(arg0 domain.ChannelType) *MockPaymentServiceNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPaymentServiceNameCall) Do(f func() domain.ChannelType) *MockPaymentServiceNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPaymentServiceNameCall) DoAndReturn(f func() domain.ChannelType) *MockPaymentServiceNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Prepay mocks base method.
func (m *MockPaymentService) Prepay(ctx context.Context, pmt domain.Payment) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepay", ctx, pmt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepay indicates an expected call of Prepay.
func (mr *MockPaymentServiceMockRecorder) Prepay(ctx, pmt any) *MockPaymentServicePrepayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepay", reflect.TypeOf((*MockPaymentService)(nil).Prepay), ctx, pmt)
	return &MockPaymentServicePrepayCall{Call: call}
}

// MockPaymentServicePrepayCall wrap *gomock.Call
type MockPaymentServicePrepayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPaymentServicePrepayCall) Return(arg0 string, arg1 error) *MockPaymentServicePrepayCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPaymentServicePrepayCall) Do(f func(context.Context, domain.Payment) (string, error)) *MockPaymentServicePrepayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPaymentServicePrepayCall) DoAndReturn(f func(context.Context, domain.Payment) (string, error)) *MockPaymentServicePrepayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryOrderBySN mocks base method.
func (m *MockPaymentService) QueryOrderBySN(ctx context.Context, orderSN string) (domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOrderBySN", ctx, orderSN)
	ret0, _ := ret[0].(domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOrderBySN indicates an expected call of QueryOrderBySN.
func (mr *MockPaymentServiceMockRecorder) QueryOrderBySN(ctx, orderSN any) *MockPaymentServiceQueryOrderBySNCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOrderBySN", reflect.TypeOf((*MockPaymentService)(nil).QueryOrderBySN), ctx, orderSN)
	return &MockPaymentServiceQueryOrderBySNCall{Call: call}
}

// MockPaymentServiceQueryOrderBySNCall wrap *gomock.Call
type MockPaymentServiceQueryOrderBySNCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPaymentServiceQueryOrderBySNCall) Return(arg0 domain.Payment, arg1 error) *MockPaymentServiceQueryOrderBySNCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPaymentServiceQueryOrderBySNCall) Do(f func(context.Context, string) (domain.Payment, error)) *MockPaymentServiceQueryOrderBySNCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPaymentServiceQueryOrderBySNCall) DoAndReturn(f func(context.Context, string) (domain.Payment, error)) *MockPaymentServiceQueryOrderBySNCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
