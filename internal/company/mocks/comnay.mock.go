// Code generated by MockGen. DO NOT EDIT.
// Source: ./company.go
//
// Generated by this command:
//
//	mockgen -source=./company.go -destination=../../mocks/comnay.mock.go -package=companymocks -typed CompanyService
//

// Package companymocks is a generated GoMock package.
package companymocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/company/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCompanyService is a mock of CompanyService interface.
type MockCompanyService struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyServiceMockRecorder
	isgomock struct{}
}

// MockCompanyServiceMockRecorder is the mock recorder for MockCompanyService.
type MockCompanyServiceMockRecorder struct {
	mock *MockCompanyService
}

// NewMockCompanyService creates a new mock instance.
func NewMockCompanyService(ctrl *gomock.Controller) *MockCompanyService {
	mock := &MockCompanyService{ctrl: ctrl}
	mock.recorder = &MockCompanyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyService) EXPECT() *MockCompanyServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCompanyService) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCompanyServiceMockRecorder) Delete(ctx, id any) *MockCompanyServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCompanyService)(nil).Delete), ctx, id)
	return &MockCompanyServiceDeleteCall{Call: call}
}

// MockCompanyServiceDeleteCall wrap *gomock.Call
type MockCompanyServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCompanyServiceDeleteCall) Return(arg0 error) *MockCompanyServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCompanyServiceDeleteCall) Do(f func(context.Context, int64) error) *MockCompanyServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCompanyServiceDeleteCall) DoAndReturn(f func(context.Context, int64) error) *MockCompanyServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetById mocks base method.
func (m *MockCompanyService) GetById(ctx context.Context, id int64) (domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCompanyServiceMockRecorder) GetById(ctx, id any) *MockCompanyServiceGetByIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCompanyService)(nil).GetById), ctx, id)
	return &MockCompanyServiceGetByIdCall{Call: call}
}

// MockCompanyServiceGetByIdCall wrap *gomock.Call
type MockCompanyServiceGetByIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCompanyServiceGetByIdCall) Return(arg0 domain.Company, arg1 error) *MockCompanyServiceGetByIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCompanyServiceGetByIdCall) Do(f func(context.Context, int64) (domain.Company, error)) *MockCompanyServiceGetByIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCompanyServiceGetByIdCall) DoAndReturn(f func(context.Context, int64) (domain.Company, error)) *MockCompanyServiceGetByIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByIds mocks base method.
func (m *MockCompanyService) GetByIds(ctx context.Context, ids []int64) (map[int64]domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIds", ctx, ids)
	ret0, _ := ret[0].(map[int64]domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIds indicates an expected call of GetByIds.
func (mr *MockCompanyServiceMockRecorder) GetByIds(ctx, ids any) *MockCompanyServiceGetByIdsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIds", reflect.TypeOf((*MockCompanyService)(nil).GetByIds), ctx, ids)
	return &MockCompanyServiceGetByIdsCall{Call: call}
}

// MockCompanyServiceGetByIdsCall wrap *gomock.Call
type MockCompanyServiceGetByIdsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCompanyServiceGetByIdsCall) Return(arg0 map[int64]domain.Company, arg1 error) *MockCompanyServiceGetByIdsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCompanyServiceGetByIdsCall) Do(f func(context.Context, []int64) (map[int64]domain.Company, error)) *MockCompanyServiceGetByIdsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCompanyServiceGetByIdsCall) DoAndReturn(f func(context.Context, []int64) (map[int64]domain.Company, error)) *MockCompanyServiceGetByIdsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockCompanyService) List(ctx context.Context, offset, limit int) ([]domain.Company, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, offset, limit)
	ret0, _ := ret[0].([]domain.Company)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockCompanyServiceMockRecorder) List(ctx, offset, limit any) *MockCompanyServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCompanyService)(nil).List), ctx, offset, limit)
	return &MockCompanyServiceListCall{Call: call}
}

// MockCompanyServiceListCall wrap *gomock.Call
type MockCompanyServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCompanyServiceListCall) Return(arg0 []domain.Company, arg1 int64, arg2 error) *MockCompanyServiceListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCompanyServiceListCall) Do(f func(context.Context, int, int) ([]domain.Company, int64, error)) *MockCompanyServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCompanyServiceListCall) DoAndReturn(f func(context.Context, int, int) ([]domain.Company, int64, error)) *MockCompanyServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockCompanyService) Save(ctx context.Context, company domain.Company) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, company)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockCompanyServiceMockRecorder) Save(ctx, company any) *MockCompanyServiceSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCompanyService)(nil).Save), ctx, company)
	return &MockCompanyServiceSaveCall{Call: call}
}

// MockCompanyServiceSaveCall wrap *gomock.Call
type MockCompanyServiceSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCompanyServiceSaveCall) Return(arg0 int64, arg1 error) *MockCompanyServiceSaveCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCompanyServiceSaveCall) Do(f func(context.Context, domain.Company) (int64, error)) *MockCompanyServiceSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCompanyServiceSaveCall) DoAndReturn(f func(context.Context, domain.Company) (int64, error)) *MockCompanyServiceSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
