// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package search

import (
	"context"
	"sync"

	"github.com/ecodeclub/mq-api"
	"github.com/ecodeclub/webook/internal/cases"
	"github.com/ecodeclub/webook/internal/search/internal/event"
	"github.com/ecodeclub/webook/internal/search/internal/repository"
	"github.com/ecodeclub/webook/internal/search/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/search/internal/service"
	"github.com/ecodeclub/webook/internal/search/internal/web"
	"github.com/ecodeclub/webook/internal/search/ioc"
	"github.com/google/wire"
	"github.com/olivere/elastic/v7"
)

// Injectors from wire.go:

func InitModule(es *elastic.Client, q mq.MQ, caModule *cases.Module) (*Module, error) {
	questionDAO := ioc.InitQuestionDAO(es)
	questionRepo := repository.NewQuestionRepo(questionDAO)
	questionSetDAO := ioc.InitQuestionSetDAO(es)
	questionSetRepo := repository.NewQuestionSetRepo(questionSetDAO)
	skillDAO := ioc.InitSkillDAO(es)
	skillRepo := repository.NewSKillRepo(skillDAO)
	caseDAO := ioc.InitCaseDAO(es)
	caseRepo := repository.NewCaseRepo(caseDAO)
	v := service.NewSearchSvc(questionRepo, questionSetRepo, skillRepo, caseRepo)
	v2 := InitSyncSvc(es)
	syncConsumer := initSyncConsumer(v2, q)
	v3 := caModule.ExamineSvc
	v4 := web.NewHandler(v, v3)
	v5 := initAdminHandler(es)
	module := &Module{
		SearchSvc:    v,
		SyncSvc:      v2,
		c:            syncConsumer,
		Hdl:          v4,
		AdminHandler: v5,
	}
	return module, nil
}

// wire.go:

func initAdminHandler(es *elastic.Client) *AdminHandler {
	caDAO := ioc.InitAdminCaseDAO(es)
	questionDAO := ioc.InitAdminQuestionDAO(es)
	questionSetDAO := ioc.InitAdminQuestionSetDAO(es)
	skillDAO := ioc.InitAdminSkillDAO(es)
	caRepo := repository.NewCaseRepo(caDAO)
	questionRepo := repository.NewQuestionRepo(questionDAO)
	questionSetRepo := repository.NewQuestionSetRepo(questionSetDAO)
	skillRepo := repository.NewSKillRepo(skillDAO)
	adminSvc := service.NewSearchSvc(questionRepo, questionSetRepo, skillRepo, caRepo)
	return web.NewAdminHandler(adminSvc)
}

// 初始化c端handler
var HandlerSet = wire.NewSet(ioc.InitCaseDAO, ioc.InitQuestionDAO, ioc.InitQuestionSetDAO, ioc.InitSkillDAO, repository.NewCaseRepo, repository.NewQuestionRepo, repository.NewQuestionSetRepo, repository.NewSKillRepo, service.NewSearchSvc, web.NewHandler)

// 初始化syncSvc
var SyncSvcSet = wire.NewSet(
	InitAnyRepo,
	InitSyncSvc,
)

var daoOnce = sync.Once{}

func InitIndexOnce(es *elastic.Client) {
	daoOnce.Do(func() {
		err := dao.InitES(es)
		if err != nil {
			panic(err)
		}
	})
}

func InitAnyRepo(es *elastic.Client) repository.AnyRepo {
	InitIndexOnce(es)
	anyDAO := dao.NewAnyEsDAO(es)
	anyRepo := repository.NewAnyRepo(anyDAO)
	return anyRepo
}

func InitSyncSvc(es *elastic.Client) service.SyncService {
	anyRepo := InitAnyRepo(es)
	return service.NewSyncSvc(anyRepo)
}

func initSyncConsumer(svc service.SyncService, q mq.MQ) *event.SyncConsumer {
	c, err := event.NewSyncConsumer(svc, q)
	if err != nil {
		panic(err)
	}
	c.Start(context.Background())
	return c
}

type SearchService = service.SearchService

type SyncService = service.SyncService

type Handler = web.Handler

type AdminHandler = web.AdminHandler
