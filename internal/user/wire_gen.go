// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package user

import (
	"github.com/ecodeclub/ecache"
	"github.com/ecodeclub/webook/internal/user/internal/repository"
	"github.com/ecodeclub/webook/internal/user/internal/repository/cache"
	"github.com/ecodeclub/webook/internal/user/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/user/internal/service"
	"github.com/ecodeclub/webook/internal/user/internal/web"
	"github.com/google/wire"
	"github.com/gotomicro/ego/core/econf"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitHandler(db *gorm.DB, cache2 ecache.Cache) *web.Handler {
	oAuth2Service := InitWechatService()
	userDAO := dao.NewGORMUserDAO(db)
	userCache := cache.NewUserECache(cache2)
	userRepository := repository.NewCachedUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository)
	handler := web.NewHandler(oAuth2Service, userService)
	return handler
}

// wire.go:

var ProviderSet = wire.NewSet(web.NewHandler, cache.NewUserECache, dao.NewGORMUserDAO, InitWechatService, service.NewUserService, repository.NewCachedUserRepository)

func InitWechatService() service.OAuth2Service {
	type Config struct {
		AppSecretID  string `yaml:"appSecretID"`
		AppSecretKey string `yaml:"appSecretKey"`
	}

	var cfg Config
	err := econf.UnmarshalKey("wechat", &cfg)
	if err != nil {
		panic(err)
	}
	return service.NewWechatService(cfg.AppSecretID, cfg.AppSecretKey)
}

// Handler 暴露出去给 ioc 使用
type Handler = web.Handler
