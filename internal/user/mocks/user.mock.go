// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.go
//
// Generated by this command:
//
//	mockgen -source=./user.go -package=usermocks -typed=true -destination=../../mocks/user.mock.go UserService
//

// Package usermocks is a generated GoMock package.
package usermocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/user/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// BatchProfile mocks base method.
func (m *MockUserService) BatchProfile(ctx context.Context, ids []int64) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchProfile", ctx, ids)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchProfile indicates an expected call of BatchProfile.
func (mr *MockUserServiceMockRecorder) BatchProfile(ctx, ids any) *MockUserServiceBatchProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchProfile", reflect.TypeOf((*MockUserService)(nil).BatchProfile), ctx, ids)
	return &MockUserServiceBatchProfileCall{Call: call}
}

// MockUserServiceBatchProfileCall wrap *gomock.Call
type MockUserServiceBatchProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceBatchProfileCall) Return(arg0 []domain.User, arg1 error) *MockUserServiceBatchProfileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceBatchProfileCall) Do(f func(context.Context, []int64) ([]domain.User, error)) *MockUserServiceBatchProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceBatchProfileCall) DoAndReturn(f func(context.Context, []int64) ([]domain.User, error)) *MockUserServiceBatchProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindOrCreateByWechat mocks base method.
func (m *MockUserService) FindOrCreateByWechat(ctx context.Context, info domain.WechatInfo) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreateByWechat", ctx, info)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrCreateByWechat indicates an expected call of FindOrCreateByWechat.
func (mr *MockUserServiceMockRecorder) FindOrCreateByWechat(ctx, info any) *MockUserServiceFindOrCreateByWechatCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreateByWechat", reflect.TypeOf((*MockUserService)(nil).FindOrCreateByWechat), ctx, info)
	return &MockUserServiceFindOrCreateByWechatCall{Call: call}
}

// MockUserServiceFindOrCreateByWechatCall wrap *gomock.Call
type MockUserServiceFindOrCreateByWechatCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceFindOrCreateByWechatCall) Return(arg0 domain.User, arg1 error) *MockUserServiceFindOrCreateByWechatCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceFindOrCreateByWechatCall) Do(f func(context.Context, domain.WechatInfo) (domain.User, error)) *MockUserServiceFindOrCreateByWechatCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceFindOrCreateByWechatCall) DoAndReturn(f func(context.Context, domain.WechatInfo) (domain.User, error)) *MockUserServiceFindOrCreateByWechatCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Profile mocks base method.
func (m *MockUserService) Profile(ctx context.Context, id int64) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profile", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Profile indicates an expected call of Profile.
func (mr *MockUserServiceMockRecorder) Profile(ctx, id any) *MockUserServiceProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockUserService)(nil).Profile), ctx, id)
	return &MockUserServiceProfileCall{Call: call}
}

// MockUserServiceProfileCall wrap *gomock.Call
type MockUserServiceProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceProfileCall) Return(arg0 domain.User, arg1 error) *MockUserServiceProfileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceProfileCall) Do(f func(context.Context, int64) (domain.User, error)) *MockUserServiceProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceProfileCall) DoAndReturn(f func(context.Context, int64) (domain.User, error)) *MockUserServiceProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateNonSensitiveInfo mocks base method.
func (m *MockUserService) UpdateNonSensitiveInfo(ctx context.Context, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNonSensitiveInfo", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNonSensitiveInfo indicates an expected call of UpdateNonSensitiveInfo.
func (mr *MockUserServiceMockRecorder) UpdateNonSensitiveInfo(ctx, user any) *MockUserServiceUpdateNonSensitiveInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNonSensitiveInfo", reflect.TypeOf((*MockUserService)(nil).UpdateNonSensitiveInfo), ctx, user)
	return &MockUserServiceUpdateNonSensitiveInfoCall{Call: call}
}

// MockUserServiceUpdateNonSensitiveInfoCall wrap *gomock.Call
type MockUserServiceUpdateNonSensitiveInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceUpdateNonSensitiveInfoCall) Return(arg0 error) *MockUserServiceUpdateNonSensitiveInfoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceUpdateNonSensitiveInfoCall) Do(f func(context.Context, domain.User) error) *MockUserServiceUpdateNonSensitiveInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceUpdateNonSensitiveInfoCall) DoAndReturn(f func(context.Context, domain.User) error) *MockUserServiceUpdateNonSensitiveInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
