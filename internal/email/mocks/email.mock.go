// Code generated by MockGen. DO NOT EDIT.
// Source: ./type.go
//
// Generated by this command:
//
//	mockgen -source=./type.go -package=emailmocks -destination=./mocks/email.mock.go -typed Service
//

// Package emailmocks is a generated GoMock package.
package emailmocks

import (
	context "context"
	reflect "reflect"

	email "github.com/ecodeclub/webook/internal/email"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// SendMail mocks base method.
func (m *MockService) SendMail(ctx context.Context, mail email.Mail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", ctx, mail)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMail indicates an expected call of SendMail.
func (mr *MockServiceMockRecorder) SendMail(ctx, mail any) *MockServiceSendMailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockService)(nil).SendMail), ctx, mail)
	return &MockServiceSendMailCall{Call: call}
}

// MockServiceSendMailCall wrap *gomock.Call
type MockServiceSendMailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSendMailCall) Return(arg0 error) *MockServiceSendMailCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSendMailCall) Do(f func(context.Context, email.Mail) error) *MockServiceSendMailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSendMailCall) DoAndReturn(f func(context.Context, email.Mail) error) *MockServiceSendMailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
