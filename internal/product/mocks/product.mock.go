// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -source=./service.go -package=productmocks -destination=../../mocks/product.mock.go -typed Service
//
// Package productmocks is a generated GoMock package.
package productmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/product/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FindSKUBySN mocks base method.
func (m *MockService) FindSKUBySN(ctx context.Context, sn string) (domain.SPU, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSKUBySN", ctx, sn)
	ret0, _ := ret[0].(domain.SPU)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSKUBySN indicates an expected call of FindSKUBySN.
func (mr *MockServiceMockRecorder) FindSKUBySN(ctx, sn any) *ServiceFindSKUBySNCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSKUBySN", reflect.TypeOf((*MockService)(nil).FindSKUBySN), ctx, sn)
	return &ServiceFindSKUBySNCall{Call: call}
}

// ServiceFindSKUBySNCall wrap *gomock.Call
type ServiceFindSKUBySNCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceFindSKUBySNCall) Return(arg0 domain.SPU, arg1 error) *ServiceFindSKUBySNCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceFindSKUBySNCall) Do(f func(context.Context, string) (domain.SPU, error)) *ServiceFindSKUBySNCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceFindSKUBySNCall) DoAndReturn(f func(context.Context, string) (domain.SPU, error)) *ServiceFindSKUBySNCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
