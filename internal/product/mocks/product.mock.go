// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -source=./service.go -package=productmocks -destination=../../mocks/product.mock.go -typed Service
//

// Package productmocks is a generated GoMock package.
package productmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/product/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FindSKUBySN mocks base method.
func (m *MockService) FindSKUBySN(ctx context.Context, sn string) (domain.SKU, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSKUBySN", ctx, sn)
	ret0, _ := ret[0].(domain.SKU)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSKUBySN indicates an expected call of FindSKUBySN.
func (mr *MockServiceMockRecorder) FindSKUBySN(ctx, sn any) *MockServiceFindSKUBySNCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSKUBySN", reflect.TypeOf((*MockService)(nil).FindSKUBySN), ctx, sn)
	return &MockServiceFindSKUBySNCall{Call: call}
}

// MockServiceFindSKUBySNCall wrap *gomock.Call
type MockServiceFindSKUBySNCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFindSKUBySNCall) Return(arg0 domain.SKU, arg1 error) *MockServiceFindSKUBySNCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFindSKUBySNCall) Do(f func(context.Context, string) (domain.SKU, error)) *MockServiceFindSKUBySNCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFindSKUBySNCall) DoAndReturn(f func(context.Context, string) (domain.SKU, error)) *MockServiceFindSKUBySNCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindSPUByID mocks base method.
func (m *MockService) FindSPUByID(ctx context.Context, id int64) (domain.SPU, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSPUByID", ctx, id)
	ret0, _ := ret[0].(domain.SPU)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSPUByID indicates an expected call of FindSPUByID.
func (mr *MockServiceMockRecorder) FindSPUByID(ctx, id any) *MockServiceFindSPUByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSPUByID", reflect.TypeOf((*MockService)(nil).FindSPUByID), ctx, id)
	return &MockServiceFindSPUByIDCall{Call: call}
}

// MockServiceFindSPUByIDCall wrap *gomock.Call
type MockServiceFindSPUByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFindSPUByIDCall) Return(arg0 domain.SPU, arg1 error) *MockServiceFindSPUByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFindSPUByIDCall) Do(f func(context.Context, int64) (domain.SPU, error)) *MockServiceFindSPUByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFindSPUByIDCall) DoAndReturn(f func(context.Context, int64) (domain.SPU, error)) *MockServiceFindSPUByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindSPUBySN mocks base method.
func (m *MockService) FindSPUBySN(ctx context.Context, sn string) (domain.SPU, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSPUBySN", ctx, sn)
	ret0, _ := ret[0].(domain.SPU)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSPUBySN indicates an expected call of FindSPUBySN.
func (mr *MockServiceMockRecorder) FindSPUBySN(ctx, sn any) *MockServiceFindSPUBySNCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSPUBySN", reflect.TypeOf((*MockService)(nil).FindSPUBySN), ctx, sn)
	return &MockServiceFindSPUBySNCall{Call: call}
}

// MockServiceFindSPUBySNCall wrap *gomock.Call
type MockServiceFindSPUBySNCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFindSPUBySNCall) Return(arg0 domain.SPU, arg1 error) *MockServiceFindSPUBySNCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFindSPUBySNCall) Do(f func(context.Context, string) (domain.SPU, error)) *MockServiceFindSPUBySNCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFindSPUBySNCall) DoAndReturn(f func(context.Context, string) (domain.SPU, error)) *MockServiceFindSPUBySNCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProductList mocks base method.
func (m *MockService) ProductList(ctx context.Context, offset, limit int) (int64, []domain.SPU, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductList", ctx, offset, limit)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]domain.SPU)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProductList indicates an expected call of ProductList.
func (mr *MockServiceMockRecorder) ProductList(ctx, offset, limit any) *MockServiceProductListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductList", reflect.TypeOf((*MockService)(nil).ProductList), ctx, offset, limit)
	return &MockServiceProductListCall{Call: call}
}

// MockServiceProductListCall wrap *gomock.Call
type MockServiceProductListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceProductListCall) Return(arg0 int64, arg1 []domain.SPU, arg2 error) *MockServiceProductListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceProductListCall) Do(f func(context.Context, int, int) (int64, []domain.SPU, error)) *MockServiceProductListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceProductListCall) DoAndReturn(f func(context.Context, int, int) (int64, []domain.SPU, error)) *MockServiceProductListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveProduct mocks base method.
func (m *MockService) SaveProduct(ctx context.Context, spu domain.SPU, uid int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProduct", ctx, spu, uid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveProduct indicates an expected call of SaveProduct.
func (mr *MockServiceMockRecorder) SaveProduct(ctx, spu, uid any) *MockServiceSaveProductCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProduct", reflect.TypeOf((*MockService)(nil).SaveProduct), ctx, spu, uid)
	return &MockServiceSaveProductCall{Call: call}
}

// MockServiceSaveProductCall wrap *gomock.Call
type MockServiceSaveProductCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSaveProductCall) Return(arg0 int64, arg1 error) *MockServiceSaveProductCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSaveProductCall) Do(f func(context.Context, domain.SPU, int64) (int64, error)) *MockServiceSaveProductCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSaveProductCall) DoAndReturn(f func(context.Context, domain.SPU, int64) (int64, error)) *MockServiceSaveProductCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
