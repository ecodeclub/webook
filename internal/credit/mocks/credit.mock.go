// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -source=./service.go -destination=../../mocks/credit.mock.go -package=creditmocks Service
//
// Package creditmocks is a generated GoMock package.
package creditmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/credit/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddCredits mocks base method.
func (m *MockService) AddCredits(ctx context.Context, credit domain.Credit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCredits", ctx, credit)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCredits indicates an expected call of AddCredits.
func (mr *MockServiceMockRecorder) AddCredits(ctx, credit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCredits", reflect.TypeOf((*MockService)(nil).AddCredits), ctx, credit)
}

// CancelDeductCredits mocks base method.
func (m *MockService) CancelDeductCredits(ctx context.Context, uid, tid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDeductCredits", ctx, uid, tid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelDeductCredits indicates an expected call of CancelDeductCredits.
func (mr *MockServiceMockRecorder) CancelDeductCredits(ctx, uid, tid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDeductCredits", reflect.TypeOf((*MockService)(nil).CancelDeductCredits), ctx, uid, tid)
}

// ConfirmDeductCredits mocks base method.
func (m *MockService) ConfirmDeductCredits(ctx context.Context, uid, tid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmDeductCredits", ctx, uid, tid)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmDeductCredits indicates an expected call of ConfirmDeductCredits.
func (mr *MockServiceMockRecorder) ConfirmDeductCredits(ctx, uid, tid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmDeductCredits", reflect.TypeOf((*MockService)(nil).ConfirmDeductCredits), ctx, uid, tid)
}

// GetCreditsByUID mocks base method.
func (m *MockService) GetCreditsByUID(ctx context.Context, uid int64) (domain.Credit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreditsByUID", ctx, uid)
	ret0, _ := ret[0].(domain.Credit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreditsByUID indicates an expected call of GetCreditsByUID.
func (mr *MockServiceMockRecorder) GetCreditsByUID(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreditsByUID", reflect.TypeOf((*MockService)(nil).GetCreditsByUID), ctx, uid)
}

// TryDeductCredits mocks base method.
func (m *MockService) TryDeductCredits(ctx context.Context, credit domain.Credit) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryDeductCredits", ctx, credit)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryDeductCredits indicates an expected call of TryDeductCredits.
func (mr *MockServiceMockRecorder) TryDeductCredits(ctx, credit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryDeductCredits", reflect.TypeOf((*MockService)(nil).TryDeductCredits), ctx, credit)
}
