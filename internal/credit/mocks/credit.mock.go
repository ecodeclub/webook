// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -source=./service.go -destination=../../mocks/credit.mock.go -package=creditmocks -typed Service
//
// Package creditmocks is a generated GoMock package.
package creditmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/credit/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddCredits mocks base method.
func (m *MockService) AddCredits(ctx context.Context, credit domain.Credit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCredits", ctx, credit)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCredits indicates an expected call of AddCredits.
func (mr *MockServiceMockRecorder) AddCredits(ctx, credit any) *ServiceAddCreditsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCredits", reflect.TypeOf((*MockService)(nil).AddCredits), ctx, credit)
	return &ServiceAddCreditsCall{Call: call}
}

// ServiceAddCreditsCall wrap *gomock.Call
type ServiceAddCreditsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceAddCreditsCall) Return(arg0 error) *ServiceAddCreditsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceAddCreditsCall) Do(f func(context.Context, domain.Credit) error) *ServiceAddCreditsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceAddCreditsCall) DoAndReturn(f func(context.Context, domain.Credit) error) *ServiceAddCreditsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CancelDeductCredits mocks base method.
func (m *MockService) CancelDeductCredits(ctx context.Context, uid, tid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDeductCredits", ctx, uid, tid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelDeductCredits indicates an expected call of CancelDeductCredits.
func (mr *MockServiceMockRecorder) CancelDeductCredits(ctx, uid, tid any) *ServiceCancelDeductCreditsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDeductCredits", reflect.TypeOf((*MockService)(nil).CancelDeductCredits), ctx, uid, tid)
	return &ServiceCancelDeductCreditsCall{Call: call}
}

// ServiceCancelDeductCreditsCall wrap *gomock.Call
type ServiceCancelDeductCreditsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceCancelDeductCreditsCall) Return(arg0 error) *ServiceCancelDeductCreditsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceCancelDeductCreditsCall) Do(f func(context.Context, int64, int64) error) *ServiceCancelDeductCreditsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceCancelDeductCreditsCall) DoAndReturn(f func(context.Context, int64, int64) error) *ServiceCancelDeductCreditsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConfirmDeductCredits mocks base method.
func (m *MockService) ConfirmDeductCredits(ctx context.Context, uid, tid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmDeductCredits", ctx, uid, tid)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmDeductCredits indicates an expected call of ConfirmDeductCredits.
func (mr *MockServiceMockRecorder) ConfirmDeductCredits(ctx, uid, tid any) *ServiceConfirmDeductCreditsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmDeductCredits", reflect.TypeOf((*MockService)(nil).ConfirmDeductCredits), ctx, uid, tid)
	return &ServiceConfirmDeductCreditsCall{Call: call}
}

// ServiceConfirmDeductCreditsCall wrap *gomock.Call
type ServiceConfirmDeductCreditsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceConfirmDeductCreditsCall) Return(arg0 error) *ServiceConfirmDeductCreditsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceConfirmDeductCreditsCall) Do(f func(context.Context, int64, int64) error) *ServiceConfirmDeductCreditsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceConfirmDeductCreditsCall) DoAndReturn(f func(context.Context, int64, int64) error) *ServiceConfirmDeductCreditsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindExpiredLockedCreditLogs mocks base method.
func (m *MockService) FindExpiredLockedCreditLogs(ctx context.Context, offset, limit int, ctime int64) ([]domain.CreditLog, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindExpiredLockedCreditLogs", ctx, offset, limit, ctime)
	ret0, _ := ret[0].([]domain.CreditLog)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindExpiredLockedCreditLogs indicates an expected call of FindExpiredLockedCreditLogs.
func (mr *MockServiceMockRecorder) FindExpiredLockedCreditLogs(ctx, offset, limit, ctime any) *ServiceFindExpiredLockedCreditLogsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindExpiredLockedCreditLogs", reflect.TypeOf((*MockService)(nil).FindExpiredLockedCreditLogs), ctx, offset, limit, ctime)
	return &ServiceFindExpiredLockedCreditLogsCall{Call: call}
}

// ServiceFindExpiredLockedCreditLogsCall wrap *gomock.Call
type ServiceFindExpiredLockedCreditLogsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceFindExpiredLockedCreditLogsCall) Return(arg0 []domain.CreditLog, arg1 int64, arg2 error) *ServiceFindExpiredLockedCreditLogsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceFindExpiredLockedCreditLogsCall) Do(f func(context.Context, int, int, int64) ([]domain.CreditLog, int64, error)) *ServiceFindExpiredLockedCreditLogsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceFindExpiredLockedCreditLogsCall) DoAndReturn(f func(context.Context, int, int, int64) ([]domain.CreditLog, int64, error)) *ServiceFindExpiredLockedCreditLogsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCreditsByUID mocks base method.
func (m *MockService) GetCreditsByUID(ctx context.Context, uid int64) (domain.Credit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreditsByUID", ctx, uid)
	ret0, _ := ret[0].(domain.Credit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreditsByUID indicates an expected call of GetCreditsByUID.
func (mr *MockServiceMockRecorder) GetCreditsByUID(ctx, uid any) *ServiceGetCreditsByUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreditsByUID", reflect.TypeOf((*MockService)(nil).GetCreditsByUID), ctx, uid)
	return &ServiceGetCreditsByUIDCall{Call: call}
}

// ServiceGetCreditsByUIDCall wrap *gomock.Call
type ServiceGetCreditsByUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceGetCreditsByUIDCall) Return(arg0 domain.Credit, arg1 error) *ServiceGetCreditsByUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceGetCreditsByUIDCall) Do(f func(context.Context, int64) (domain.Credit, error)) *ServiceGetCreditsByUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceGetCreditsByUIDCall) DoAndReturn(f func(context.Context, int64) (domain.Credit, error)) *ServiceGetCreditsByUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TryDeductCredits mocks base method.
func (m *MockService) TryDeductCredits(ctx context.Context, credit domain.Credit) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryDeductCredits", ctx, credit)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryDeductCredits indicates an expected call of TryDeductCredits.
func (mr *MockServiceMockRecorder) TryDeductCredits(ctx, credit any) *ServiceTryDeductCreditsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryDeductCredits", reflect.TypeOf((*MockService)(nil).TryDeductCredits), ctx, credit)
	return &ServiceTryDeductCreditsCall{Call: call}
}

// ServiceTryDeductCreditsCall wrap *gomock.Call
type ServiceTryDeductCreditsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceTryDeductCreditsCall) Return(id int64, err error) *ServiceTryDeductCreditsCall {
	c.Call = c.Call.Return(id, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceTryDeductCreditsCall) Do(f func(context.Context, domain.Credit) (int64, error)) *ServiceTryDeductCreditsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceTryDeductCreditsCall) DoAndReturn(f func(context.Context, domain.Credit) (int64, error)) *ServiceTryDeductCreditsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
