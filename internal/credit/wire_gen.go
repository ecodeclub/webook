// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package credit

import (
	"context"
	"sync"

	"github.com/ecodeclub/ecache"
	"github.com/ecodeclub/mq-api"
	"github.com/ecodeclub/webook/internal/credit/internal/domain"
	"github.com/ecodeclub/webook/internal/credit/internal/event"
	"github.com/ecodeclub/webook/internal/credit/internal/repository"
	"github.com/ecodeclub/webook/internal/credit/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/credit/internal/service"
	"github.com/ego-component/egorm"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *gorm.DB, q mq.MQ, e ecache.Cache) (*Module, error) {
	service := InitService(db)
	creditIncreaseConsumer := initCreditConsumer(service, q)
	module := &Module{
		Svc: service,
		c:   creditIncreaseConsumer,
	}
	return module, nil
}

// wire.go:

type Credit = domain.Credit

type Service = service.Service

var (
	once = &sync.Once{}
	svc  service.Service
)

func InitService(db *egorm.Component) Service {
	once.Do(func() {
		_ = dao.InitTables(db)
		d := dao.NewCreditGORMDAO(db)
		r := repository.NewCreditRepository(d)
		svc = service.NewCreditService(r)
	})
	return svc
}

func initCreditConsumer(svc2 service.Service, q mq.MQ) *event.CreditIncreaseConsumer {
	c, err := event.NewCreditIncreaseConsumer(svc2, q)
	if err != nil {
		panic(err)
	}
	c.Start(context.Background())
	return c
}
