// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package resume

import (
	"sync"

	"github.com/ecodeclub/webook/internal/ai"
	"github.com/ecodeclub/webook/internal/cases"
	"github.com/ecodeclub/webook/internal/resume/internal/repository"
	"github.com/ecodeclub/webook/internal/resume/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/resume/internal/service"
	"github.com/ecodeclub/webook/internal/resume/internal/web"
	"github.com/ego-component/egorm"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *gorm.DB, caModule *cases.Module, aiModule *ai.Module) *Module {
	daoResumeProjectDAO := initResumeProjectDAOOnce(db)
	resumeProjectRepo := repository.NewResumeProjectRepo(daoResumeProjectDAO)
	serviceService := service.NewService(resumeProjectRepo)
	examineService := caModule.ExamineSvc
	service2 := caModule.Svc
	projectHandler := web.NewHandler(serviceService, examineService, service2)
	experienceDAO := dao.NewExperienceDAO(db)
	experience := repository.NewExperience(experienceDAO)
	experienceService := service.NewExperienceService(experience)
	experienceHandler := web.NewExperienceHandler(experienceService)
	llmService := aiModule.Svc
	analysisService := service.NewAnalysisService(llmService)
	analysisHandler := web.NewAnalysisHandler(analysisService)
	module := &Module{
		PrjHdl:          projectHandler,
		ExperienceHdl:   experienceHandler,
		AnalysisHandler: analysisHandler,
	}
	return module
}

// wire.go:

var (
	resumeProjectDAO     dao.ResumeProjectDAO
	resumeProjectDAOOnce sync.Once
)

func initResumeProjectDAOOnce(db *egorm.Component) dao.ResumeProjectDAO {
	resumeProjectDAOOnce.Do(func() {
		resumeProjectDAO = dao.NewResumeProjectDAO(db)
		err := dao.InitTables(db)
		if err != nil {
			panic(err)
		}
	})
	return resumeProjectDAO
}
