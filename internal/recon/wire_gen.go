// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package recon

import (
	"time"

	"github.com/ecodeclub/webook/internal/credit"
	"github.com/ecodeclub/webook/internal/order"
	"github.com/ecodeclub/webook/internal/payment"
	"github.com/ecodeclub/webook/internal/recon/internal/job"
	"github.com/ecodeclub/webook/internal/recon/internal/service"
)

// Injectors from wire.go:

func InitModule(o *order.Module, p *payment.Module, c *credit.Module) (*Module, error) {
	service := o.Svc
	serviceService := p.Svc
	service2 := c.Svc
	service3 := initService(service, serviceService, service2)
	syncPaymentAndOrderJob := initSyncPaymentAndOrderJob(service3)
	module := &Module{
		Svc:                    service3,
		SyncPaymentAndOrderJob: syncPaymentAndOrderJob,
	}
	return module, nil
}

// wire.go:

type (
	Service                = service.Service
	SyncPaymentAndOrderJob = job.SyncPaymentAndOrderJob
)

func initService(orderSvc order.Service,
	paymentSvc payment.Service,
	creditSvc credit.Service) Service {
	initialInterval := 100 * time.Millisecond
	maxInterval := 1 * time.Second
	maxRetries := int32(6)
	return service.NewService(orderSvc, paymentSvc, creditSvc, initialInterval, maxInterval, maxRetries)
}

func initSyncPaymentAndOrderJob(svc service.Service) *SyncPaymentAndOrderJob {
	minutes := int64(30)
	seconds := int64(10)
	limit := 100
	return job.NewSyncPaymentAndOrderJob(svc, minutes, seconds, limit)
}
