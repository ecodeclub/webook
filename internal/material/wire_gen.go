// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package material

import (
	"sync"

	"github.com/ecodeclub/mq-api"
	"github.com/ecodeclub/webook/internal/material/internal/event"
	"github.com/ecodeclub/webook/internal/material/internal/repository"
	"github.com/ecodeclub/webook/internal/material/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/material/internal/service"
	"github.com/ecodeclub/webook/internal/material/internal/web"
	"github.com/ecodeclub/webook/internal/sms/client"
	"github.com/ecodeclub/webook/internal/user"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *gorm.DB, q mq.MQ, client2 client.Client, userModule *user.Module) (*Module, error) {
	materialDAO := initDAO(db)
	materialRepository := repository.NewMaterialRepository(materialDAO)
	materialService := service.NewMaterialService(materialRepository)
	userService := userModule.Svc
	memberEventProducer, err := event.NewMemberEventProducer(q)
	if err != nil {
		return nil, err
	}
	adminHandler := web.NewAdminHandler(materialService, userService, memberEventProducer, client2)
	handler := web.NewHandler(materialService)
	module := &Module{
		AdminHdl: adminHandler,
		Hdl:      handler,
	}
	return module, nil
}

// wire.go:

type (
	Handler      = web.Handler
	AdminHandler = web.AdminHandler
)

var initOnce sync.Once

func initDAO(db *gorm.DB) dao.MaterialDAO {
	initOnce.Do(func() {
		err := dao.InitTables(db)
		if err != nil {
			panic(err)
		}
	})
	return dao.NewGORMMaterialDAO(db)
}
