// Code generated by MockGen. DO NOT EDIT.
// Source: ./type.go
//
// Generated by this command:
//
//	mockgen -source=./type.go -destination=../mocks/gpt.mock.go -package=aimocks -typed=true GPTSdk
//

// Package aimocks is a generated GoMock package.
package aimocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGPTSdk is a mock of GPTSdk interface.
type MockGPTSdk struct {
	ctrl     *gomock.Controller
	recorder *MockGPTSdkMockRecorder
}

// MockGPTSdkMockRecorder is the mock recorder for MockGPTSdk.
type MockGPTSdkMockRecorder struct {
	mock *MockGPTSdk
}

// NewMockGPTSdk creates a new mock instance.
func NewMockGPTSdk(ctrl *gomock.Controller) *MockGPTSdk {
	mock := &MockGPTSdk{ctrl: ctrl}
	mock.recorder = &MockGPTSdkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGPTSdk) EXPECT() *MockGPTSdkMockRecorder {
	return m.recorder
}

// Invoke mocks base method.
func (m *MockGPTSdk) Invoke(ctx context.Context, input []string) (int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", ctx, input)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Invoke indicates an expected call of Invoke.
func (mr *MockGPTSdkMockRecorder) Invoke(ctx, input any) *MockGPTSdkInvokeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockGPTSdk)(nil).Invoke), ctx, input)
	return &MockGPTSdkInvokeCall{Call: call}
}

// MockGPTSdkInvokeCall wrap *gomock.Call
type MockGPTSdkInvokeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGPTSdkInvokeCall) Return(arg0 int64, arg1 string, arg2 error) *MockGPTSdkInvokeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGPTSdkInvokeCall) Do(f func(context.Context, []string) (int64, string, error)) *MockGPTSdkInvokeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGPTSdkInvokeCall) DoAndReturn(f func(context.Context, []string) (int64, string, error)) *MockGPTSdkInvokeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
