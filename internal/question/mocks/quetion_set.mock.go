// Code generated by MockGen. DO NOT EDIT.
// Source: ./question_set.go
//
// Generated by this command:
//
//	mockgen -source=./question_set.go -destination=../../mocks/quetion_set.mock.go -package=quemocks -typed=true QuestionSetService
//
// Package quemocks is a generated GoMock package.
package quemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/question/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockQuestionSetService is a mock of QuestionSetService interface.
type MockQuestionSetService struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionSetServiceMockRecorder
}

// MockQuestionSetServiceMockRecorder is the mock recorder for MockQuestionSetService.
type MockQuestionSetServiceMockRecorder struct {
	mock *MockQuestionSetService
}

// NewMockQuestionSetService creates a new mock instance.
func NewMockQuestionSetService(ctrl *gomock.Controller) *MockQuestionSetService {
	mock := &MockQuestionSetService{ctrl: ctrl}
	mock.recorder = &MockQuestionSetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionSetService) EXPECT() *MockQuestionSetServiceMockRecorder {
	return m.recorder
}

// Detail mocks base method.
func (m *MockQuestionSetService) Detail(ctx context.Context, id int64) (domain.QuestionSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detail", ctx, id)
	ret0, _ := ret[0].(domain.QuestionSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detail indicates an expected call of Detail.
func (mr *MockQuestionSetServiceMockRecorder) Detail(ctx, id any) *QuestionSetServiceDetailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockQuestionSetService)(nil).Detail), ctx, id)
	return &QuestionSetServiceDetailCall{Call: call}
}

// QuestionSetServiceDetailCall wrap *gomock.Call
type QuestionSetServiceDetailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *QuestionSetServiceDetailCall) Return(arg0 domain.QuestionSet, arg1 error) *QuestionSetServiceDetailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *QuestionSetServiceDetailCall) Do(f func(context.Context, int64) (domain.QuestionSet, error)) *QuestionSetServiceDetailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *QuestionSetServiceDetailCall) DoAndReturn(f func(context.Context, int64) (domain.QuestionSet, error)) *QuestionSetServiceDetailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByIds mocks base method.
func (m *MockQuestionSetService) GetByIds(ctx context.Context, ids []int64) ([]domain.QuestionSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIds", ctx, ids)
	ret0, _ := ret[0].([]domain.QuestionSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIds indicates an expected call of GetByIds.
func (mr *MockQuestionSetServiceMockRecorder) GetByIds(ctx, ids any) *QuestionSetServiceGetByIdsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIds", reflect.TypeOf((*MockQuestionSetService)(nil).GetByIds), ctx, ids)
	return &QuestionSetServiceGetByIdsCall{Call: call}
}

// QuestionSetServiceGetByIdsCall wrap *gomock.Call
type QuestionSetServiceGetByIdsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *QuestionSetServiceGetByIdsCall) Return(arg0 []domain.QuestionSet, arg1 error) *QuestionSetServiceGetByIdsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *QuestionSetServiceGetByIdsCall) Do(f func(context.Context, []int64) ([]domain.QuestionSet, error)) *QuestionSetServiceGetByIdsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *QuestionSetServiceGetByIdsCall) DoAndReturn(f func(context.Context, []int64) ([]domain.QuestionSet, error)) *QuestionSetServiceGetByIdsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockQuestionSetService) List(ctx context.Context, offset, limit int) ([]domain.QuestionSet, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, offset, limit)
	ret0, _ := ret[0].([]domain.QuestionSet)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockQuestionSetServiceMockRecorder) List(ctx, offset, limit any) *QuestionSetServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockQuestionSetService)(nil).List), ctx, offset, limit)
	return &QuestionSetServiceListCall{Call: call}
}

// QuestionSetServiceListCall wrap *gomock.Call
type QuestionSetServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *QuestionSetServiceListCall) Return(arg0 []domain.QuestionSet, arg1 int64, arg2 error) *QuestionSetServiceListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *QuestionSetServiceListCall) Do(f func(context.Context, int, int) ([]domain.QuestionSet, int64, error)) *QuestionSetServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *QuestionSetServiceListCall) DoAndReturn(f func(context.Context, int, int) ([]domain.QuestionSet, int64, error)) *QuestionSetServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockQuestionSetService) Save(ctx context.Context, set domain.QuestionSet) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, set)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockQuestionSetServiceMockRecorder) Save(ctx, set any) *QuestionSetServiceSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockQuestionSetService)(nil).Save), ctx, set)
	return &QuestionSetServiceSaveCall{Call: call}
}

// QuestionSetServiceSaveCall wrap *gomock.Call
type QuestionSetServiceSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *QuestionSetServiceSaveCall) Return(arg0 int64, arg1 error) *QuestionSetServiceSaveCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *QuestionSetServiceSaveCall) Do(f func(context.Context, domain.QuestionSet) (int64, error)) *QuestionSetServiceSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *QuestionSetServiceSaveCall) DoAndReturn(f func(context.Context, domain.QuestionSet) (int64, error)) *QuestionSetServiceSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateQuestions mocks base method.
func (m *MockQuestionSetService) UpdateQuestions(ctx context.Context, set domain.QuestionSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestions", ctx, set)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuestions indicates an expected call of UpdateQuestions.
func (mr *MockQuestionSetServiceMockRecorder) UpdateQuestions(ctx, set any) *QuestionSetServiceUpdateQuestionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestions", reflect.TypeOf((*MockQuestionSetService)(nil).UpdateQuestions), ctx, set)
	return &QuestionSetServiceUpdateQuestionsCall{Call: call}
}

// QuestionSetServiceUpdateQuestionsCall wrap *gomock.Call
type QuestionSetServiceUpdateQuestionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *QuestionSetServiceUpdateQuestionsCall) Return(arg0 error) *QuestionSetServiceUpdateQuestionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *QuestionSetServiceUpdateQuestionsCall) Do(f func(context.Context, domain.QuestionSet) error) *QuestionSetServiceUpdateQuestionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *QuestionSetServiceUpdateQuestionsCall) DoAndReturn(f func(context.Context, domain.QuestionSet) error) *QuestionSetServiceUpdateQuestionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
