// Code generated by MockGen. DO NOT EDIT.
// Source: ./examine.go
//
// Generated by this command:
//
//	mockgen -source=./examine.go -destination=../../mocks/examine.mock.go -package=quemocks -typed=true ExamineService
//

// Package quemocks is a generated GoMock package.
package quemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/question/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockExamineService is a mock of ExamineService interface.
type MockExamineService struct {
	ctrl     *gomock.Controller
	recorder *MockExamineServiceMockRecorder
}

// MockExamineServiceMockRecorder is the mock recorder for MockExamineService.
type MockExamineServiceMockRecorder struct {
	mock *MockExamineService
}

// NewMockExamineService creates a new mock instance.
func NewMockExamineService(ctrl *gomock.Controller) *MockExamineService {
	mock := &MockExamineService{ctrl: ctrl}
	mock.recorder = &MockExamineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExamineService) EXPECT() *MockExamineServiceMockRecorder {
	return m.recorder
}

// Examine mocks base method.
func (m *MockExamineService) Examine(ctx context.Context, uid, qid int64, input string) (domain.ExamineResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Examine", ctx, uid, qid, input)
	ret0, _ := ret[0].(domain.ExamineResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Examine indicates an expected call of Examine.
func (mr *MockExamineServiceMockRecorder) Examine(ctx, uid, qid, input any) *MockExamineServiceExamineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Examine", reflect.TypeOf((*MockExamineService)(nil).Examine), ctx, uid, qid, input)
	return &MockExamineServiceExamineCall{Call: call}
}

// MockExamineServiceExamineCall wrap *gomock.Call
type MockExamineServiceExamineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExamineServiceExamineCall) Return(arg0 domain.ExamineResult, arg1 error) *MockExamineServiceExamineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExamineServiceExamineCall) Do(f func(context.Context, int64, int64, string) (domain.ExamineResult, error)) *MockExamineServiceExamineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExamineServiceExamineCall) DoAndReturn(f func(context.Context, int64, int64, string) (domain.ExamineResult, error)) *MockExamineServiceExamineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResults mocks base method.
func (m *MockExamineService) GetResults(ctx context.Context, uid int64, ids []int64) (map[int64]domain.ExamineResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResults", ctx, uid, ids)
	ret0, _ := ret[0].(map[int64]domain.ExamineResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResults indicates an expected call of GetResults.
func (mr *MockExamineServiceMockRecorder) GetResults(ctx, uid, ids any) *MockExamineServiceGetResultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResults", reflect.TypeOf((*MockExamineService)(nil).GetResults), ctx, uid, ids)
	return &MockExamineServiceGetResultsCall{Call: call}
}

// MockExamineServiceGetResultsCall wrap *gomock.Call
type MockExamineServiceGetResultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExamineServiceGetResultsCall) Return(arg0 map[int64]domain.ExamineResult, arg1 error) *MockExamineServiceGetResultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExamineServiceGetResultsCall) Do(f func(context.Context, int64, []int64) (map[int64]domain.ExamineResult, error)) *MockExamineServiceGetResultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExamineServiceGetResultsCall) DoAndReturn(f func(context.Context, int64, []int64) (map[int64]domain.ExamineResult, error)) *MockExamineServiceGetResultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QuestionResult mocks base method.
func (m *MockExamineService) QuestionResult(ctx context.Context, uid, qid int64) (domain.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuestionResult", ctx, uid, qid)
	ret0, _ := ret[0].(domain.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuestionResult indicates an expected call of QuestionResult.
func (mr *MockExamineServiceMockRecorder) QuestionResult(ctx, uid, qid any) *MockExamineServiceQuestionResultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuestionResult", reflect.TypeOf((*MockExamineService)(nil).QuestionResult), ctx, uid, qid)
	return &MockExamineServiceQuestionResultCall{Call: call}
}

// MockExamineServiceQuestionResultCall wrap *gomock.Call
type MockExamineServiceQuestionResultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExamineServiceQuestionResultCall) Return(arg0 domain.Result, arg1 error) *MockExamineServiceQuestionResultCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExamineServiceQuestionResultCall) Do(f func(context.Context, int64, int64) (domain.Result, error)) *MockExamineServiceQuestionResultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExamineServiceQuestionResultCall) DoAndReturn(f func(context.Context, int64, int64) (domain.Result, error)) *MockExamineServiceQuestionResultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Correct mocks base method.
func (m *MockExamineService) Correct(ctx context.Context, uid, qid int64, questionResult domain.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Correct", ctx, uid, qid, questionResult)
	ret0, _ := ret[0].(error)
	return ret0
}

// Correct indicates an expected call of Correct.
func (mr *MockExamineServiceMockRecorder) Correct(ctx, uid, qid, questionResult any) *MockExamineServiceCorrectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Correct", reflect.TypeOf((*MockExamineService)(nil).Correct), ctx, uid, qid, questionResult)
	return &MockExamineServiceCorrectCall{Call: call}
}

// MockExamineServiceCorrectCall wraps *gomock.Call.
type MockExamineServiceCorrectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return for Correct.
func (c *MockExamineServiceCorrectCall) Return(arg0 error) *MockExamineServiceCorrectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do for Correct.
func (c *MockExamineServiceCorrectCall) Do(f func(context.Context, int64, int64, domain.Result) error) *MockExamineServiceCorrectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn for Correct.
func (c *MockExamineServiceCorrectCall) DoAndReturn(f func(context.Context, int64, int64, domain.Result) error) *MockExamineServiceCorrectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
