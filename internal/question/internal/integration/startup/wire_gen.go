// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"os"

	"github.com/ecodeclub/ginx/session"
	"github.com/ecodeclub/webook/internal/ai"
	"github.com/ecodeclub/webook/internal/interactive"
	"github.com/ecodeclub/webook/internal/member"
	"github.com/ecodeclub/webook/internal/permission"
	baguwen "github.com/ecodeclub/webook/internal/question"
	"github.com/ecodeclub/webook/internal/question/internal/event"
	"github.com/ecodeclub/webook/internal/question/internal/job"
	"github.com/ecodeclub/webook/internal/question/internal/repository"
	"github.com/ecodeclub/webook/internal/question/internal/repository/cache"
	"github.com/ecodeclub/webook/internal/question/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/question/internal/service"
	"github.com/ecodeclub/webook/internal/question/internal/web"
	testioc "github.com/ecodeclub/webook/internal/test/ioc"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitModule(p event.SyncDataToSearchEventProducer, knowledgeBaseP event.KnowledgeBaseEventProducer, intrModule *interactive.Module, permModule *permission.Module, aiModule *ai.Module, sp session.Provider, memberModule *member.Module) (*baguwen.Module, error) {
	v := testioc.InitDB()
	questionDAO := baguwen.InitQuestionDAO(v)
	ecacheCache := testioc.InitCache()
	questionCache := cache.NewQuestionECache(ecacheCache)
	repositoryRepository := repository.NewCacheRepository(questionDAO, questionCache)
	mq := testioc.InitMQ()
	interactiveEventProducer, err := event.NewInteractiveEventProducer(mq)
	if err != nil {
		return nil, err
	}
	v2 := service.NewService(repositoryRepository, p, interactiveEventProducer, knowledgeBaseP)
	questionSetDAO := baguwen.InitQuestionSetDAO(v)
	questionSetRepository := repository.NewQuestionSetRepository(questionSetDAO)
	v3 := service.NewQuestionSetService(questionSetRepository, repositoryRepository, interactiveEventProducer, p)
	examineDAO := dao.NewGORMExamineDAO(v)
	examineRepository := repository.NewCachedExamineRepository(examineDAO)
	v4 := aiModule.Svc
	v5 := service.NewLLMExamineService(repositoryRepository, examineRepository, v4)
	client := testioc.InitES()
	searchSyncService := service.NewSearchSyncService(repositoryRepository, client)
	v6 := web.NewAdminHandler(v2, searchSyncService)
	v7 := web.NewAdminQuestionSetHandler(v3)
	v8 := intrModule.Svc
	v9 := permModule.Svc
	v10 := memberModule.Svc
	v11 := web.NewHandler(v8, v5, v9, v2, sp, v10)
	v12 := web.NewQuestionSetHandler(v3, v5, v8, sp)
	v13 := web.NewExamineHandler(v5)
	v14 := initKnowledgeJobStarter(v2)
	v15 := aiModule.KnowledgeBaseSvc
	questionKnowledgeBase := initKnowledgeBaseSvc(v15, repositoryRepository)
	v16 := web.NewKnowledgeBaseHandler(questionKnowledgeBase)
	module := &baguwen.Module{
		Svc:                 v2,
		SetSvc:              v3,
		ExamSvc:             v5,
		AdminHdl:            v6,
		AdminSetHdl:         v7,
		Hdl:                 v11,
		QsHdl:               v12,
		ExamineHdl:          v13,
		KnowledgeJobStarter: v14,
		KnowledgeBaseHdl:    v16,
	}
	return module, nil
}

// wire.go:

var moduleSet = wire.NewSet(baguwen.InitQuestionDAO, cache.NewQuestionECache, repository.NewCacheRepository, service.NewService, web.NewHandler, web.NewAdminHandler, initKnowledgeJobStarter, web.NewAdminQuestionSetHandler, baguwen.ExamineHandlerSet, baguwen.InitQuestionSetDAO, repository.NewQuestionSetRepository, service.NewQuestionSetService, service.NewSearchSyncService, web.NewQuestionSetHandler, initKnowledgeBaseSvc, web.NewKnowledgeBaseHandler, wire.Struct(new(baguwen.Module), "*"))

func initKnowledgeJobStarter(svc service.Service) *job.KnowledgeJobStarter {
	return job.NewKnowledgeJobStarter(svc, os.TempDir())
}

func initKnowledgeBaseSvc(svc ai.KnowledgeBaseService, queRepo repository.Repository) service.QuestionKnowledgeBase {
	return service.NewQuestionKnowledgeBase("knowledge_id", queRepo, svc)
}
