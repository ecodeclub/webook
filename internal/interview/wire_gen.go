// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package interview

import (
	"sync"

	"github.com/ecodeclub/webook/internal/interview/internal/repository"
	"github.com/ecodeclub/webook/internal/interview/internal/repository/dao"
	"github.com/ecodeclub/webook/internal/interview/internal/service"
	"github.com/ecodeclub/webook/internal/interview/internal/web"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitModule(db *gorm.DB) (*Module, error) {
	interviewJourneyDAO := initJourneyDAO(db)
	interviewRoundDAO := initRoundDAO(db)
	interviewRoundRepository := repository.NewInterviewRoundRepository(interviewRoundDAO)
	interviewJourneyRepository := repository.NewInterviewJourneyRepository(interviewJourneyDAO, interviewRoundRepository)
	interviewJourneyService := service.NewInterviewJourneyService(interviewJourneyRepository)
	interviewJourneyHandler := web.NewInterviewJourneyHandler(interviewJourneyService)
	interviewRoundService := service.NewInterviewRoundService(interviewJourneyRepository, interviewRoundRepository)
	interviewRoundHandler := web.NewInterviewRoundHandler(interviewRoundService)
	module := &Module{
		JourneyHdl: interviewJourneyHandler,
		RoundHdl:   interviewRoundHandler,
	}
	return module, nil
}

// wire.go:

type (
	JourneyHandler = web.InterviewJourneyHandler
	RoundHandler   = web.InterviewRoundHandler
)

var initOnce sync.Once

func initJourneyDAO(db *gorm.DB) dao.InterviewJourneyDAO {
	initOnce.Do(func() {
		err := dao.InitTables(db)
		if err != nil {
			panic(err)
		}
	})
	return dao.NewGORMInterviewJourneyDAO(db)
}

func initRoundDAO(db *gorm.DB) dao.InterviewRoundDAO {
	initOnce.Do(func() {
		err := dao.InitTables(db)
		if err != nil {
			panic(err)
		}
	})
	return dao.NewGORMInterviewRoundDAO(db)
}
